{"version":3,"sources":["utils/Api.tsx","components/Ranking.tsx","pages/ACRanking.tsx","pages/FastestRanking.tsx","pages/FirstRanking.tsx","pages/ShortRanking.tsx","pages/SumRanking.tsx","pages/LanguageOwners.tsx","utils/index.ts","utils/DateFormat.ts","utils/Url.tsx","pages/UserPage/FilteringHeatmap.tsx","pages/ListPage.tsx","pages/UserPage/ClimingLineChart.tsx","pages/UserPage/DailyEffortBarChart.tsx","pages/UserPage/SmallPieChart.tsx","components/CalendarHeatmap.tsx","pages/TablePage.tsx","pages/UserPage/SubmissionList.tsx","pages/UserPage/index.tsx","components/NavigationBar.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["BASE_URL","STATIC_API_BASE_URL","fetchRanking","url","fetch","then","r","json","fetchShortRanking","fetchFastRanking","fetchFirstRanking","fetchSumRanking","fetchContests","fetchMergedProblems","fetchSubmissions","user","concat","Ranking","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","_this2","users","sort","a","b","count","rank","cur","forEach","_","i","push","map","u","id","setState","react_default","createElement","Row","title","lib","height","pagination","striped","hover","options","paginationPosition","sizePerPage","sizePerPageList","text","value","length","dataField","isKey","React","Component","ACRanking","components_Ranking","rows","row","problem_count","user_id","FastestRanking","ApiUrl","FirstRanking","ShortRanking","SumRanking","point_sum","ordinalNumbers","OneOwner","_ref","language","ranking","className","slice","_ref2","name","Col","key","LanguageOwners","rankings","entries","Map","entry","e","arr","get","set","Array","from","_ref3","_ref4","slicedToArray","LanguageOwners_OneOwner","isAccepted","result","ordinalSuffixOf","j","k","formatDate","epoch_second","date","Date","year","getFullYear","month","getMonth","day","getDate","FilterStatus","formatContestUrl","contest","formatSubmissionUrl","formatProblemUrl","problem","ListPage","problems","Promise","all","Api","merged_problems","contest_map","reduce","point","predict","showing_point","contest_id","start_epoch_second","objectSpread","status","rivals","last_ac_date","localeCompare","updateProblems","user_ids","prevProps","prevState","_this3","flat","submissions","submission_map","submission","problem_id","s","new_status","mine","filter","some","new_rivals_set","includes","add","Set","new_rivals","new_ac_date","reverse","new_problem","assign","columns","header","dataSort","dataFormat","href","Url","target","dataAlign","Badge","color","cell","toFixed","fastest_submission_id","fastest_contest_id","fastest_user_id","execution_time","shortest_submission_id","shortest_contest_id","shortest_user_id","source_code_length","first_submission_id","first_contest_id","first_user_id","keyField","trClassName","c","ClimingLineChart","climing_data","es6","width","margin","top","right","left","bottom","strokeDasharray","dataKey","type","domain","tickFormatter","ms","labelFormatter","v","stroke","DailyEffortBarChart","daily_data","fill","COLORS","SmallPieChart","trying","accepted","outerRadius","CalendarHeatmap","next_sunday","getDay","setDate","current_date","WEEKS","count_map","undefined","table_data","viewBox","block_width","Math","min","week","floor","x","y","UncontrolledTooltip","delay","show","hide","placement","formatTooltip","Status","FilteringHeatmap","filter_status","AllSubmissions","filtered_submissions","AllAccepted","UniqueAccepted","values","ButtonGroup","Button","onClick","active","components_CalendarHeatmap","unit","SubmissionList","title_map","p","second","UserPage","first_ranking","fast_ranking","short_ranking","user_info","accepted_count","accepted_count_rank","rated_point_sum","rated_point_sum_rank","current_streak","longest_streak","last_ac","updateState","getUserIdFromProps","first_ac_map","_get_streak","get_streak","date_count_map","getTime","info","_this$state","shortest_rank","get_rank","fastest_rank","first_rank","d","ac_submissions","agc_solved","count_solved","abc_solved","arc_solved","achievements","_ref5","_ref6","solved","total","split","xs","UserPage_SmallPieChart","_ref7","_ref8","UserPage_DailyEffortBarChart","UserPage_ClimingLineChart","UserPage_FilteringHeatmap","UserPage_SubmissionList","seconds","_ref9","_ref10","index","second1","second2","max","today","last_ac_second","_ref11","_ref12","_ref13","prefix","regexps","ids","match","total_count","solved_count","_ref14","PageKind","get_table_class","Nothing","Solved","Trying","RivalSolved","TablePage","contests","initialProblems","_createAtCoderBeginne","createAtCoderBeginnerRegularContestTable","_createAtCoderBeginne2","abc","arc","agc","createAtCoderGrandContestTable","other_contest_map","list","other_contests","TablePage_AtCoderRegularTable","toUpperCase","columnClassName","TablePage_ContestTable","ContestTable","Table","bordered","responsive","AtCoderRegularTable","regexp","pushToMap","sortMap","_ref15","_ref16","abc_map","arc_map","PrimitiveNavigationBar","rival_id","kind","TABLE","nextKind","current_pathname","history","location","pathname","next_pathname","join","USER","LIST","params","root_url","Navbar","light","expand","NavbarBrand","tag","RouterLink","to","Nav","navbar","Form","inline","FormGroup","Input","style","onKeyPress","submit","placeholder","onChange","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","DropdownMenu","DropdownItem","NavigationBar","withRouter","extractUserId","App","HashRouter","components_NavigationBar","Container","maxWidth","Switch","Route","exact","path","component","pages_UserPage","pages_TablePage","pages_ListPage","Redirect","Boolean","window","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.53408b41.chunk.js","sourcesContent":["import Contest from '../interfaces/Contest';\nimport Problem from '../interfaces/Problem';\nimport MergedProblem from '../interfaces/MergedProblem';\nimport UserInfo from '../interfaces/UserInfo';\nimport Submission from '../interfaces/Submission';\n\nconst BASE_URL = 'https://kenkoooo.com/atcoder';\nconst STATIC_API_BASE_URL = BASE_URL + '/resources';\nconst DYNAMIC_API_BASE_URL = BASE_URL + '/atcoder-api';\n\nconst AC_COUNT_URL = STATIC_API_BASE_URL + '/ac.json';\nconst SHORT_COUNT_URL = STATIC_API_BASE_URL + '/short.json';\nconst FAST_COUNT_URL = STATIC_API_BASE_URL + '/fast.json';\nconst FIRST_COUNT_URL = STATIC_API_BASE_URL + '/first.json';\nconst SUM_URL = STATIC_API_BASE_URL + '/sums.json';\nconst LANG_URL = STATIC_API_BASE_URL + '/lang.json';\n\ninterface RankingEntry {\n\tproblem_count: number;\n\tuser_id: string;\n}\n\nconst fetchRanking = (url: string) => fetch(url).then((r) => r.json()).then((r) => r as RankingEntry[]);\n\nexport const fetchACRanking = () => fetchRanking(AC_COUNT_URL);\nexport const fetchShortRanking = () => fetchRanking(SHORT_COUNT_URL);\nexport const fetchFastRanking = () => fetchRanking(FAST_COUNT_URL);\nexport const fetchFirstRanking = () => fetchRanking(FIRST_COUNT_URL);\nexport const fetchSumRanking = () =>\n\tfetch(SUM_URL).then((r) => r.json()).then(\n\t\t(r) =>\n\t\t\tr as {\n\t\t\t\tuser_id: string;\n\t\t\t\tpoint_sum: number;\n\t\t\t}[]\n\t);\nexport const fetchLangRanking = () =>\n\tfetch(LANG_URL).then((r) => r.json()).then(\n\t\t(r) =>\n\t\t\tr as {\n\t\t\t\tuser_id: string;\n\t\t\t\tcount: number;\n\t\t\t\tlanguage: string;\n\t\t\t}[]\n\t);\n\nexport const fetchContests = () =>\n\tfetch(STATIC_API_BASE_URL + '/contests.json').then((r) => r.json()).then((r) => r as Contest[]);\nexport const fetchProblems = () =>\n\tfetch(STATIC_API_BASE_URL + '/problems.json').then((r) => r.json()).then((r) => r as Problem[]);\nexport const fetchMergedProblems = () =>\n\tfetch(STATIC_API_BASE_URL + '/merged-problems.json').then((r) => r.json()).then((r) => r as MergedProblem[]);\nexport const fetchUserInfo = (user: string) =>\n\tfetch(`${DYNAMIC_API_BASE_URL}/v2/user_info?user=${user}`).then((r) => r.json()).then((info) => info as UserInfo);\nexport const fetchSubmissions = (user: string) =>\n\tfetch(`${DYNAMIC_API_BASE_URL}/results?user=${user}`).then((r) => r.json()).then((r) => r as Submission[]);\n","import React from 'react';\nimport { Row } from 'reactstrap';\nimport { BootstrapTable, TableHeaderColumn } from 'react-bootstrap-table';\n\ninterface Props {\n\ttitle: string;\n\tfetch: (() => Promise<{ count: number; id: string }[]>);\n}\n\ninterface User {\n\tcount: number;\n\tid: string;\n\trank: number;\n}\n\ninterface State {\n\tdata: User[];\n}\n\nclass Ranking extends React.Component<Props, State> {\n\tconstructor(props: any) {\n\t\tsuper(props);\n\t\tthis.state = { data: [] };\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.props.fetch().then((users) => {\n\t\t\tusers.sort((a, b) => b.count - a.count);\n\t\t\tconst rank: number[] = [];\n\t\t\tlet cur = 1;\n\t\t\tusers.forEach((_, i) => {\n\t\t\t\tif (i > 0 && users[i].count < users[i - 1].count) {\n\t\t\t\t\tcur = i + 1;\n\t\t\t\t}\n\t\t\t\trank.push(cur);\n\t\t\t});\n\t\t\tconst data = users.map((u, i) => ({\n\t\t\t\tcount: u.count,\n\t\t\t\tid: u.id,\n\t\t\t\trank: rank[i]\n\t\t\t}));\n\t\t\tthis.setState({ data });\n\t\t});\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<Row>\n\t\t\t\t<h2>{this.props.title}</h2>\n\t\t\t\t<BootstrapTable\n\t\t\t\t\theight=\"auto\"\n\t\t\t\t\tdata={this.state.data}\n\t\t\t\t\tpagination\n\t\t\t\t\tstriped\n\t\t\t\t\thover\n\t\t\t\t\toptions={{\n\t\t\t\t\t\tpaginationPosition: 'top',\n\t\t\t\t\t\tsizePerPage: 20,\n\t\t\t\t\t\tsizePerPageList: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttext: '20',\n\t\t\t\t\t\t\t\tvalue: 20\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttext: '50',\n\t\t\t\t\t\t\t\tvalue: 50\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttext: '100',\n\t\t\t\t\t\t\t\tvalue: 100\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttext: '200',\n\t\t\t\t\t\t\t\tvalue: 200\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttext: 'All',\n\t\t\t\t\t\t\t\tvalue: this.state.data.length\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<TableHeaderColumn dataField=\"rank\">#</TableHeaderColumn>\n\t\t\t\t\t<TableHeaderColumn dataField=\"id\" isKey>\n\t\t\t\t\t\tUser\n\t\t\t\t\t</TableHeaderColumn>\n\t\t\t\t\t<TableHeaderColumn dataField=\"count\">Count</TableHeaderColumn>\n\t\t\t\t</BootstrapTable>\n\t\t\t</Row>\n\t\t);\n\t}\n}\n\nexport default Ranking;\n","import React from 'react';\nimport * as ApiUrl from '../utils/Api';\nimport Ranking from '../components/Ranking';\n\nconst ACRanking = () => (\n\t<Ranking\n\t\ttitle=\"AC Count Ranking\"\n\t\tfetch={() =>\n\t\t\tApiUrl.fetchACRanking().then((rows) => rows.map((row) => ({ count: row.problem_count, id: row.user_id })))}\n\t/>\n);\n\nexport default ACRanking;\n","import React from 'react';\nimport * as ApiUrl from \"../utils/Api\";\nimport Ranking from \"../components/Ranking\";\n\nconst FastestRanking = () => (\n    <Ranking\n        title=\"Fastest Submission Ranking\"\n        fetch={() => ApiUrl.fetchFastRanking().then(rows => rows.map(row => ({ count: row.problem_count, id: row.user_id })))}\n\n    />\n);\n\nexport default FastestRanking;\n","import React from 'react';\nimport * as ApiUrl from \"../utils/Api\";\nimport Ranking from \"../components/Ranking\";\n\nconst FirstRanking = () => (\n    <Ranking\n        title=\"First AC Ranking\"\n        fetch={() => ApiUrl.fetchFirstRanking().then(rows => rows.map(row => ({ count: row.problem_count, id: row.user_id })))}\n    />\n);\n\nexport default FirstRanking;\n","import React from \"react\";\nimport * as ApiUrl from \"../utils/Api\";\nimport Ranking from \"../components/Ranking\";\n\nconst ShortRanking = () => (\n  <Ranking\n    title=\"Top Golfers\"\n    fetch={() =>\n      ApiUrl.fetchShortRanking().then(rows =>\n        rows.map(row => ({ count: row.problem_count, id: row.user_id }))\n      )\n    }\n  />\n);\n\nexport default ShortRanking;\n","import React from \"react\";\nimport * as ApiUrl from \"../utils/Api\";\nimport Ranking from \"../components/Ranking\";\n\nconst SumRanking = () => (\n  <Ranking\n    title=\"Rated Point Ranking\"\n    fetch={() =>\n      ApiUrl.fetchSumRanking().then(rows =>\n        rows.map(row => ({ count: row.point_sum, id: row.user_id }))\n      )\n    }\n  />\n);\n\nexport default SumRanking;\n","import React from \"react\";\nimport { Row, Col } from \"reactstrap\";\n\nimport * as Api from \"../utils/Api\";\n\nconst ordinalNumbers = [\"1st\", \"2nd\", \"3rd\"];\n\ninterface Ranking {\n  language: string;\n  ranking: { name: string; count: number }[];\n}\n\nconst OneOwner = ({\n  language,\n  ranking\n}: {\n  language: string;\n  ranking: { name: string; count: number }[];\n}) => (\n  <div>\n    <Row className=\"justify-content-center my-2 border-bottom\">\n      <h1>{language}</h1>\n    </Row>\n    <Row>\n      {ranking.slice(0, 3).map(({ name, count }, i) => (\n        <Col key={name} className=\"text-center\">\n          <h5>{ordinalNumbers[i]}</h5>\n          <h3>{name}</h3>\n          <h5 className=\"text-muted\">{count} AC</h5>\n        </Col>\n      ))}\n    </Row>\n  </div>\n);\n\ninterface State {\n  rankings: Ranking[];\n}\n\nclass LanguageOwners extends React.Component<{}, State> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      rankings: []\n    };\n  }\n\n  componentDidMount() {\n    Api.fetchLangRanking().then(entries => {\n      const map: Map<string, { name: string; count: number }[]> = new Map();\n      entries.forEach(entry => {\n        const e = {\n          name: entry.user_id,\n          count: entry.count\n        };\n        const arr = map.get(entry.language);\n        if (arr) {\n          arr.push(e);\n        } else {\n          map.set(entry.language, [e]);\n        }\n      });\n\n      const rankings = Array.from(map).map(([language, ranking]) => ({\n        language,\n        ranking: ranking.sort((a, b) => b.count - a.count)\n      }));\n      this.setState({ rankings });\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        {this.state.rankings.map(entry => (\n          <OneOwner\n            key={entry.language}\n            language={entry.language}\n            ranking={entry.ranking}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default LanguageOwners;\n","export const isAccepted = (result: string) => result === \"AC\";\nexport const ordinalSuffixOf = (i: number) => {\n  const j = i % 10;\n  const k = i % 100;\n  if (j == 1 && k != 11) {\n    return \"st\";\n  }\n  if (j == 2 && k != 12) {\n    return \"nd\";\n  }\n  if (j == 3 && k != 13) {\n    return \"rd\";\n  }\n  return \"th\";\n};\n","export function formatDate(epoch_second: number) {\n\tconst date = new Date(epoch_second * 1000);\n\tconst year = date.getFullYear();\n\tconst month = date.getMonth() + 1;\n\tconst day = date.getDate();\n\tconst month_str = month < 10 ? '0' + month : month;\n\tconst day_str = day < 10 ? '0' + day : day;\n\treturn year + '-' + month_str + '-' + day_str;\n}\n","const BASE_URL = 'https://atcoder.jp';\n\nexport const formatContestUrl = (contest: string) => `${BASE_URL}/contests/${contest}`;\n\nexport const formatSubmissionUrl = (id: number, contest: string) => `${formatContestUrl(contest)}/submissions/${id}`;\n\nexport const formatProblemUrl = (problem: string, contest: string) => `${formatContestUrl(contest)}/tasks/${problem}`;\n\nexport const formatSolversUrl = (contest: string, problem: string) =>\n\t`${formatContestUrl(contest)}/submissions?f.Task=${problem}&f.Status=AC`;\n","import React from \"react\";\nimport { ButtonGroup, Button, Row } from \"reactstrap\";\n\nimport CalendarHeatmap from \"../../components/CalendarHeatmap\";\nimport Submission from \"../../interfaces/Submission\";\nimport { isAccepted } from \"../../utils\";\n\nenum FilterStatus {\n  AllSubmissions,\n  AllAccepted,\n  UniqueAccepted\n}\n\ninterface Props {\n  submissions: Submission[];\n}\n\ninterface State {\n  filter_status: FilterStatus;\n}\n\nclass FilteringHeatmap extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      filter_status: FilterStatus.AllSubmissions\n    };\n  }\n\n  render() {\n    const filtered_submissions = ((filter_status: FilterStatus) => {\n      switch (filter_status) {\n        case FilterStatus.AllSubmissions:\n          return this.props.submissions;\n        case FilterStatus.AllAccepted:\n          return this.props.submissions.filter(s => isAccepted(s.result));\n        case FilterStatus.UniqueAccepted:\n          const map = this.props.submissions\n            .filter(s => isAccepted(s.result))\n            .sort((a, b) => b.epoch_second - a.epoch_second)\n            .reduce(\n              (map, s) => map.set(s.problem_id, s),\n              new Map<string, Submission>()\n            );\n          return Array.from(map.values());\n        default:\n          throw \"unreachable\";\n      }\n    })(this.state.filter_status);\n\n    return (\n      <div>\n        <Row className=\"my-2\">\n          <ButtonGroup>\n            <Button\n              onClick={() =>\n                this.setState({ filter_status: FilterStatus.AllSubmissions })\n              }\n              active={this.state.filter_status === FilterStatus.AllSubmissions}\n            >\n              All Submissions\n            </Button>\n            <Button\n              onClick={() =>\n                this.setState({ filter_status: FilterStatus.AllAccepted })\n              }\n              active={this.state.filter_status === FilterStatus.AllAccepted}\n            >\n              All AC\n            </Button>\n            <Button\n              onClick={() =>\n                this.setState({ filter_status: FilterStatus.UniqueAccepted })\n              }\n              active={this.state.filter_status === FilterStatus.UniqueAccepted}\n            >\n              Unique AC\n            </Button>\n          </ButtonGroup>\n        </Row>\n        <Row>\n          <CalendarHeatmap\n            data={filtered_submissions.map(\n              s => new Date(s.epoch_second * 1000)\n            )}\n            formatTooltip={(date: string, count: number) => {\n              let unit = \"\";\n              if (this.state.filter_status === FilterStatus.AllAccepted) {\n                unit = \"AC\";\n              } else if (\n                this.state.filter_status == FilterStatus.AllSubmissions\n              ) {\n                unit = \"Submissions\";\n              } else {\n                unit = \"Unique AC\";\n              }\n              return `${date} ${count} ${unit}`;\n            }}\n          />\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default FilteringHeatmap;\n","import React from \"react\";\nimport { BootstrapTable, TableHeaderColumn } from \"react-bootstrap-table\";\nimport { Badge } from \"reactstrap\";\n\nimport { isAccepted } from \"../utils\";\nimport { formatDate } from \"../utils/DateFormat\";\nimport * as Api from \"../utils/Api\";\nimport * as Url from \"../utils/Url\";\nimport MergedProblem from \"../interfaces/MergedProblem\";\nimport Contest from \"../interfaces/Contest\";\nimport Submission from \"../interfaces/Submission\";\n\nconst INF_POINT = 1e18;\n\ninterface Problem extends MergedProblem {\n  showing_point: number;\n  date: string;\n\n  contest: Contest;\n\n  status: string;\n  rivals: string[];\n\n  last_ac_date: string;\n}\n\ninterface Props {\n  user_ids: string[];\n}\n\ninterface State {\n  problems: Problem[];\n}\n\nclass ListPage extends React.Component<Props, State> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      problems: []\n    };\n  }\n\n  componentDidMount() {\n    Promise.all([Api.fetchMergedProblems(), Api.fetchContests()]).then(\n      ([merged_problems, contests]) => {\n        const contest_map = contests.reduce(\n          (map, contest) => map.set(contest.id, contest),\n          new Map<string, Contest>()\n        );\n\n        const problems: Problem[] = merged_problems.map(problem => {\n          const { point, predict } = problem;\n          const showing_point = point ? point : predict ? predict : INF_POINT;\n\n          const contest = (() => {\n            const contest = contest_map.get(problem.contest_id);\n            if (contest) {\n              return contest;\n            } else {\n              throw `${problem.id} is not belonged to any contest.`;\n            }\n          })();\n\n          const date = formatDate(contest.start_epoch_second);\n\n          const status = \"\";\n          const rivals: string[] = [];\n          const last_ac_date = \"\";\n\n          return {\n            status,\n            showing_point,\n            contest,\n            date,\n            rivals,\n            last_ac_date,\n            ...problem\n          };\n        });\n\n        problems.sort((a, b) => {\n          if (a.contest.start_epoch_second == b.contest.start_epoch_second) {\n            return b.title.localeCompare(a.title);\n          } else {\n            return b.contest.start_epoch_second - a.contest.start_epoch_second;\n          }\n        });\n\n        this.setState({ problems }, () =>\n          this.updateProblems(this.props.user_ids)\n        );\n      }\n    );\n  }\n\n  componentDidUpdate(prevProps: Props, prevState: State) {\n    if (prevProps.user_ids !== this.props.user_ids) {\n      this.updateProblems(this.props.user_ids);\n    }\n  }\n\n  updateProblems(user_ids: string[]) {\n    return Promise.all(user_ids.map(Api.fetchSubmissions))\n      .then(r => r.flat())\n      .then(submissions => {\n        const submission_map = submissions\n          .sort((a, b) => a.epoch_second - b.epoch_second)\n          .reduce((map, submission) => {\n            const arr = map.get(submission.problem_id);\n            if (arr) {\n              arr.push(submission);\n            } else {\n              map.set(submission.problem_id, [submission]);\n            }\n            return map;\n          }, new Map<string, Submission[]>());\n\n        const user = user_ids.length > 0 ? user_ids[0] : \"\";\n        const rivals = this.props.user_ids.slice(1);\n\n        const problems = this.state.problems.map(problem => {\n          const submissions = (() => {\n            const s = submission_map.get(problem.id);\n            return s ? s : [];\n          })();\n\n          const new_status = (() => {\n            const mine = submissions.filter(s => s.user_id === user);\n            if (mine.some(s => isAccepted(s.result))) {\n              return \"AC\";\n            } else if (mine.length > 0) {\n              return mine[mine.length - 1].result;\n            } else {\n              return \"\";\n            }\n          })();\n\n          const new_rivals_set = (() =>\n            submissions\n              .filter(s => rivals.includes(s.user_id))\n              .filter(s => isAccepted(s.result))\n              .reduce(\n                (set, submission) => set.add(submission.user_id),\n                new Set<string>()\n              ))();\n          const new_rivals = Array.from(new_rivals_set).sort();\n          const new_ac_date = (() => {\n            let s = submissions\n              .filter(s => s.user_id === user)\n              .filter(s => isAccepted(s.result))\n              .reverse();\n            if (s.length > 0) {\n              return formatDate(s[0].epoch_second);\n            } else {\n              return \"\";\n            }\n          })();\n          if (\n            new_status !== problem.status ||\n            new_rivals !== problem.rivals ||\n            new_ac_date !== problem.last_ac_date\n          ) {\n            const new_problem = Object.assign({}, problem);\n            new_problem.rivals = new_rivals;\n            new_problem.status = new_status;\n            new_problem.last_ac_date = new_ac_date;\n            return new_problem;\n          } else {\n            return problem;\n          }\n        });\n\n        this.setState({ problems });\n      });\n  }\n\n  render() {\n    const columns: {\n      header: string;\n      dataField: string;\n      dataSort?: boolean;\n      dataAlign?: \"center\";\n      dataFormat?: (cell: any, row: Problem) => JSX.Element;\n    }[] = [\n      {\n        header: \"Date\",\n        dataField: \"date\"\n      },\n      {\n        header: \"Problem\",\n        dataField: \"title\",\n        dataSort: true,\n        dataFormat: (_: string, row: Problem) => (\n          <a\n            href={Url.formatProblemUrl(row.id, row.contest_id)}\n            target=\"_blank\"\n          >\n            {row.title}\n          </a>\n        )\n      },\n      {\n        header: \"Contest\",\n        dataField: \"contest_id\",\n        dataSort: true,\n        dataFormat: (contest_id: string, problem: Problem) => (\n          <a href={Url.formatContestUrl(contest_id)} target=\"_blank\">\n            {problem.contest.title}\n          </a>\n        )\n      },\n      {\n        header: \"Result\",\n        dataField: \"id\",\n        dataAlign: \"center\",\n        dataFormat: (id: string, problem: Problem) => {\n          if (isAccepted(problem.status)) {\n            return <Badge color=\"success\">AC</Badge>;\n          } else if (problem.rivals.length > 0) {\n            return (\n              <div>\n                {problem.rivals.map(r => (\n                  <Badge key={r} color=\"danger\">\n                    {r}\n                  </Badge>\n                ))}\n              </div>\n            );\n          } else {\n            return <Badge color=\"warning\">{problem.status}</Badge>;\n          }\n        }\n      },\n      {\n        header: \"Last AC Date\",\n        dataField: \"last_ac_date\",\n        dataSort: true\n      },\n      {\n        header: \"Solvers\",\n        dataField: \"solver_count\",\n        dataSort: true,\n        dataFormat: (cell: number, row: Problem) => (\n          <a\n            href={Url.formatSolversUrl(row.contest_id, row.id)}\n            target=\"_blank\"\n          >\n            {cell}\n          </a>\n        )\n      },\n      {\n        header: \"Point\",\n        dataField: \"showing_point\",\n        dataSort: true,\n        dataFormat: (showing_point: any) => {\n          if (showing_point >= INF_POINT) {\n            return \"-\";\n          } else {\n            if (showing_point % 100 == 0) {\n              return showing_point;\n            } else {\n              return showing_point.toFixed(2);\n            }\n          }\n        }\n      },\n      {\n        header: \"Fastest\",\n        dataField: \"execution_time\",\n        dataSort: true,\n        dataFormat: (_: number, row: Problem) => (\n          <a\n            href={Url.formatSubmissionUrl(\n              row.fastest_submission_id,\n              row.fastest_contest_id\n            )}\n            target=\"_blank\"\n          >\n            {row.fastest_user_id} ({row.execution_time} ms)\n          </a>\n        )\n      },\n      {\n        header: \"Shortest\",\n        dataField: \"source_code_length\",\n        dataSort: true,\n        dataFormat: (_: number, row: Problem) => (\n          <a\n            href={Url.formatSubmissionUrl(\n              row.shortest_submission_id,\n              row.shortest_contest_id\n            )}\n            target=\"_blank\"\n          >\n            {row.shortest_user_id} ({row.source_code_length} Bytes)\n          </a>\n        )\n      },\n      {\n        header: \"First\",\n        dataField: \"first_user_id\",\n        dataSort: true,\n        dataFormat: (_: string, row: Problem) => (\n          <a\n            href={Url.formatSubmissionUrl(\n              row.first_submission_id,\n              row.first_contest_id\n            )}\n            target=\"_blank\"\n          >\n            {row.first_user_id}\n          </a>\n        )\n      }\n    ];\n    return (\n      <BootstrapTable\n        pagination\n        keyField=\"id\"\n        height=\"auto\"\n        hover\n        striped\n        trClassName={(problem: Problem) => {\n          if (isAccepted(problem.status)) {\n            return \"table-success\";\n          } else if (problem.rivals.length > 0) {\n            return \"table-danger\";\n          } else if (problem.status.length > 0) {\n            return \"table-warning\";\n          } else {\n            return \"\";\n          }\n        }}\n        data={this.state.problems}\n        options={{\n          paginationPosition: \"top\",\n          sizePerPage: 20,\n          sizePerPageList: [\n            {\n              text: \"20\",\n              value: 20\n            },\n            {\n              text: \"50\",\n              value: 50\n            },\n            {\n              text: \"100\",\n              value: 100\n            },\n            {\n              text: \"200\",\n              value: 200\n            },\n            {\n              text: \"All\",\n              value: this.state.problems.length\n            }\n          ]\n        }}\n      >\n        {columns.map(c => (\n          <TableHeaderColumn key={c.header} {...c}>\n            {c.header}\n          </TableHeaderColumn>\n        ))}\n      </BootstrapTable>\n    );\n  }\n}\n\nexport default ListPage;\n","import React from \"react\";\nimport { Row } from \"reactstrap\";\nimport {\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  LineChart,\n  Line,\n  ResponsiveContainer\n} from \"recharts\";\n\nimport { formatDate } from \"../../utils/DateFormat\";\n\nconst ClimingLineChart = ({\n  climing_data\n}: {\n  climing_data: { date: number; count: number }[];\n}) => (\n  <Row className=\"my-3\">\n    <ResponsiveContainer width=\"100%\" height={300}>\n      <LineChart\n        data={climing_data}\n        margin={{\n          top: 5,\n          right: 30,\n          left: 20,\n          bottom: 5\n        }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis\n          dataKey=\"date\"\n          type=\"number\"\n          domain={[\"dataMin\", \"dataMax\"]}\n          tickFormatter={(ms: number) => formatDate(ms / 1000)}\n        />\n        <YAxis />\n        <Tooltip labelFormatter={(v: any) => formatDate(v / 1000)} />\n        <Line dataKey=\"count\" stroke=\"#8884d8\" />\n      </LineChart>\n    </ResponsiveContainer>\n  </Row>\n);\nexport default ClimingLineChart;\n","import React from \"react\";\nimport { Row } from \"reactstrap\";\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer\n} from \"recharts\";\n\nimport { formatDate } from \"../../utils/DateFormat\";\n\nconst DailyEffortBarChart = ({\n  daily_data\n}: {\n  daily_data: { date: number; count: number }[];\n}) => (\n  <Row className=\"my-3\">\n    <ResponsiveContainer width=\"100%\" height={300}>\n      <BarChart\n        data={daily_data}\n        margin={{\n          top: 5,\n          right: 30,\n          left: 20,\n          bottom: 5\n        }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis\n          dataKey=\"date\"\n          type=\"number\"\n          domain={[\"dataMin\", \"dataMax\"]}\n          tickFormatter={(ms: number) => formatDate(ms / 1000)}\n        />\n        <YAxis />\n        <Tooltip labelFormatter={(v: any) => formatDate(v / 1000)} />\n        <Bar dataKey=\"count\" fill=\"#8884d8\" />\n      </BarChart>\n    </ResponsiveContainer>\n  </Row>\n);\n\nexport default DailyEffortBarChart;\n","import React from \"react\";\nimport {\n  PieChart,\n  Pie,\n  ResponsiveContainer,\n  Cell,\n  Tooltip,\n  Legend\n} from \"recharts\";\n\nconst COLORS = {\n  Accepted: \"#32cd32\",\n  Trying: \"#58616a\"\n};\n\nconst SmallPieChart = ({\n  title,\n  trying,\n  accepted\n}: {\n  title: string;\n  trying: number;\n  accepted: number;\n}) => {\n  const data = [\n    { value: accepted, color: COLORS.Accepted, name: \"Accepted\" },\n    { value: trying, color: COLORS.Trying, name: \"Trying\" }\n  ];\n  return (\n    <div>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <PieChart>\n          <Pie dataKey=\"value\" data={data} outerRadius=\"80%\" fill=\"#ff0000\">\n            {data.map((e, i) => (\n              <Cell key={e.name} fill={e.color} />\n            ))}\n          </Pie>\n          <Tooltip />\n          <Legend />\n        </PieChart>\n      </ResponsiveContainer>\n      <h5>{title}</h5>\n      <h5 className=\"text-muted\">{`${accepted} / ${accepted + trying}`}</h5>\n    </div>\n  );\n};\n\nexport default SmallPieChart;\n","import React from 'react';\nimport { UncontrolledTooltip } from 'reactstrap';\n\nconst WEEKDAY = 7;\nconst WEEKS = 53;\nconst COLORS = [ '#ebedf0', '#c6e48b', '#7bc96f', '#239a3b', '#196127' ];\n\nconst formatDate = (date: Date) => {\n\tconst year = date.getFullYear();\n\tconst month = date.getMonth() + 1;\n\tconst day = date.getDate();\n\tconst month_str = month < 10 ? '0' + month : month;\n\tconst day_str = day < 10 ? '0' + day : day;\n\treturn year + '-' + month_str + '-' + day_str;\n};\n\nconst CalendarHeatmap = (props: { data: Date[]; formatTooltip?: (date: string, count: number) => string }) => {\n\tconst next_sunday = new Date();\n\twhile (next_sunday.getDay() != 0) {\n\t\tnext_sunday.setDate(next_sunday.getDate() + 1);\n\t}\n\n\tconst current_date = new Date(next_sunday);\n\tcurrent_date.setDate(current_date.getDate() - WEEKS * WEEKDAY);\n\n\tconst count_map = new Map<string, number>();\n\twhile (formatDate(current_date) !== formatDate(next_sunday)) {\n\t\tcount_map.set(formatDate(current_date), 0);\n\t\tcurrent_date.setDate(current_date.getDate() + 1);\n\t}\n\n\tprops.data.forEach((date) => {\n\t\tconst count = count_map.get(formatDate(date));\n\t\tif (count !== undefined) {\n\t\t\tcount_map.set(formatDate(date), count + 1);\n\t\t}\n\t});\n\n\tconst table_data = Array.from(count_map)\n\t\t.map(([ date, count ]) => ({ count, date }))\n\t\t.sort((a, b) => a.date.localeCompare(b.date));\n\n\tconst block_width = 10;\n\tconst width = block_width * WEEKS;\n\tconst height = block_width * WEEKDAY;\n\treturn (\n\t\t<div>\n\t\t\t<svg viewBox={`0 0 ${width} ${height}`}>\n\t\t\t\t{table_data.map(({ date, count }, i) => {\n\t\t\t\t\tconst color = COLORS[Math.min(count, COLORS.length - 1)];\n\t\t\t\t\tconst week = Math.floor(i / WEEKDAY);\n\t\t\t\t\tconst day = i % WEEKDAY;\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<rect\n\t\t\t\t\t\t\tkey={date}\n\t\t\t\t\t\t\tid={`rect-${date}`}\n\t\t\t\t\t\t\tx={week * block_width}\n\t\t\t\t\t\t\ty={day * block_width}\n\t\t\t\t\t\t\twidth={block_width}\n\t\t\t\t\t\t\theight={block_width}\n\t\t\t\t\t\t\tfill={color}\n\t\t\t\t\t\t/>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</svg>\n\n\t\t\t{table_data.map(({ date, count }) => (\n\t\t\t\t<UncontrolledTooltip delay={{ show: 0, hide: 0 }} key={date} placement=\"right\" target={`rect-${date}`}>\n\t\t\t\t\t{props.formatTooltip ? props.formatTooltip(date, count) : `${date}: ${count}`}\n\t\t\t\t</UncontrolledTooltip>\n\t\t\t))}\n\t\t</div>\n\t);\n};\n\nexport default CalendarHeatmap;\n","import React from \"react\";\nimport { Row, Table } from \"reactstrap\";\nimport { BootstrapTable, TableHeaderColumn } from \"react-bootstrap-table\";\nimport { isAccepted } from \"../utils\";\n\nimport * as Api from \"../utils/Api\";\nimport * as Url from \"../utils/Url\";\nimport Contest from \"../interfaces/Contest\";\nimport Problem from \"../interfaces/Problem\";\n\nenum Status {\n  Nothing = 0,\n  Trying = 1,\n  RivalSolved = 2,\n  Solved = 3\n}\n\nconst get_table_class = (status: Status) => {\n  switch (status) {\n    case Status.Nothing:\n      return \"\";\n    case Status.Solved:\n      return \"table-success\";\n    case Status.Trying:\n      return \"table-warning\";\n    case Status.RivalSolved:\n      return \"table-danger\";\n  }\n};\n\ntype ContestAndProblems = { contest: Contest; problems: ProblemWithStatus[] };\n\ninterface ProblemWithStatus extends Problem {\n  status: Status;\n  contest: Contest;\n}\n\ninterface Props {\n  user_ids: string[];\n}\n\ninterface State {\n  contests: Contest[];\n  problems: ProblemWithStatus[];\n}\n\nclass TablePage extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      contests: [],\n      problems: []\n    };\n  }\n\n  componentDidMount() {\n    Promise.all([Api.fetchProblems(), Api.fetchContests()]).then(\n      ([initialProblems, contests]) => {\n        const contest_map = contests.reduce(\n          (map, c) => map.set(c.id, c),\n          new Map<string, Contest>()\n        );\n        const problems = initialProblems.map(p => {\n          const contest = contest_map.get(p.contest_id);\n          if (!contest) {\n            throw `${p.contest_id} does not exist!`;\n          }\n          return { status: Status.Nothing, contest, ...p };\n        });\n\n        this.setState({ problems, contests }, () => {\n          this.updateState(this.props.user_ids);\n        });\n      }\n    );\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (this.props !== prevProps) {\n      this.updateState(this.props.user_ids);\n    }\n  }\n\n  updateState(user_ids: string[]) {\n    const user = user_ids.length > 0 ? user_ids[0] : \"\";\n    const rivals = user_ids.slice(1);\n    Promise.all(user_ids.map(user_id => Api.fetchSubmissions(user_id)))\n      .then(r => r.flat())\n      .then(submissions =>\n        submissions\n          .filter(\n            s =>\n              s.user_id === user ||\n              (rivals.includes(s.user_id) && isAccepted(s.result))\n          )\n          .map(({ problem_id, user_id, result }) => {\n            if (user_id === user) {\n              if (isAccepted(result)) {\n                return { problem_id, status: Status.Solved };\n              } else {\n                return { problem_id, status: Status.Trying };\n              }\n            } else {\n              return { problem_id, status: Status.RivalSolved };\n            }\n          })\n          .sort((a, b) => a.status - b.status)\n          .reduce(\n            (map, s) => map.set(s.problem_id, s.status),\n            new Map<string, Status>()\n          )\n      )\n      .then(map => {\n        const problems = this.state.problems.map(p => {\n          const status = map.get(p.id);\n          const problem = Object.assign({}, p);\n          problem.status = Status.Nothing;\n          if (status !== undefined) {\n            problem.status = status;\n          }\n          return problem;\n        });\n        this.setState({ problems });\n      });\n  }\n\n  render() {\n    const [abc, arc] = createAtCoderBeginnerRegularContestTable(\n      this.state.contests,\n      this.state.problems\n    );\n    const agc = createAtCoderGrandContestTable(\n      this.state.contests,\n      this.state.problems\n    );\n    abc.forEach(row => {\n      row.problems = row.problems.slice(0, 4);\n    });\n    arc.forEach(row => {\n      const length = row.problems.length;\n      row.problems = row.problems.slice(length - 4, length);\n    });\n\n    const other_contest_map = this.state.problems\n      .filter(p => !p.contest.id.match(/^a[rgb]c\\d{3}$/))\n      .reduce((map, problem) => {\n        const list = map.get(problem.contest.id);\n        if (list) {\n          list.push(problem);\n        } else {\n          map.set(problem.contest.id, [problem]);\n        }\n        return map;\n      }, new Map<string, ProblemWithStatus[]>());\n\n    const other_contests = Array.from(other_contest_map)\n      .map(([_, problems]) => ({ contest: problems[0].contest, problems }))\n      .sort(\n        (a, b) => b.contest.start_epoch_second - a.contest.start_epoch_second\n      );\n\n    return (\n      <div>\n        <AtCoderRegularTable contests={abc} title=\"AtCoder Beginner Contest\" />\n        <AtCoderRegularTable contests={arc} title=\"AtCoder Regular Contest\" />\n\n        <Row>\n          <h2>AtCoder Grand Contest</h2>\n          <BootstrapTable data={agc} keyField=\"contest_id\">\n            <TableHeaderColumn\n              dataField=\"contest_id\"\n              dataFormat={(contest_id: string) => (\n                <a href={Url.formatContestUrl(contest_id)} target=\"_blank\">\n                  {contest_id.toUpperCase()}\n                </a>\n              )}\n            >\n              Contest\n            </TableHeaderColumn>\n            {\"ABCDEF\".split(\"\").map((c, i) => (\n              <TableHeaderColumn\n                dataField={c}\n                key={c}\n                columnClassName={(\n                  _: any,\n                  { problems }: { problems: ProblemWithStatus[] }\n                ) => {\n                  const problem = problems[i];\n                  if (problem) {\n                    return get_table_class(problems[i].status);\n                  } else {\n                    return \"\";\n                  }\n                }}\n                dataFormat={(\n                  _: any,\n                  row: { contest_id: string; problems: ProblemWithStatus[] }\n                ) => {\n                  const problem = row.problems[i];\n                  if (problem) {\n                    return (\n                      <a\n                        target=\"_blank\"\n                        href={Url.formatProblemUrl(\n                          problem.id,\n                          problem.contest_id\n                        )}\n                      >\n                        {problem.title}\n                      </a>\n                    );\n                  } else {\n                    return \"-\";\n                  }\n                }}\n              >\n                {c}\n              </TableHeaderColumn>\n            ))}\n          </BootstrapTable>\n        </Row>\n        <Row className=\"my-4\">\n          <h2>Other Contests</h2>\n        </Row>\n        <ContestTable contests={other_contests} />\n      </div>\n    );\n  }\n}\n\nconst ContestTable = ({ contests }: { contests: ContestAndProblems[] }) => (\n  <div>\n    {contests.map(({ contest, problems }) => (\n      <div key={contest.id}>\n        <h5>\n          <strong>\n            <a target=\"_blank\" href={Url.formatContestUrl(contest.id)}>\n              {contest.title}\n            </a>\n          </strong>\n        </h5>\n        <Table striped bordered hover responsive>\n          <tbody>\n            <tr>\n              {problems\n                .sort((a, b) => a.title.localeCompare(b.title))\n                .map(p => (\n                  <td key={p.id} className={get_table_class(p.status)}>\n                    <a\n                      target=\"_blank\"\n                      href={Url.formatProblemUrl(p.id, p.contest_id)}\n                    >\n                      {p.title}\n                    </a>\n                  </td>\n                ))}\n            </tr>\n          </tbody>\n        </Table>\n      </div>\n    ))}\n  </div>\n);\n\nconst AtCoderRegularTable = ({\n  contests,\n  title\n}: {\n  contests: { contest_id: string; problems: ProblemWithStatus[] }[];\n  title: string;\n}) => (\n  <Row className=\"my-4\">\n    <h2>{title}</h2>\n    <BootstrapTable data={contests}>\n      <TableHeaderColumn\n        isKey\n        dataField=\"contest_id\"\n        dataFormat={(\n          _: any,\n          row: { contest_id: string; problems: ProblemWithStatus[] }\n        ) => (\n          <a href={Url.formatContestUrl(row.contest_id)} target=\"_blank\">\n            {row.contest_id.toUpperCase()}\n          </a>\n        )}\n      >\n        Contest\n      </TableHeaderColumn>\n      {\"ABCD\".split(\"\").map((c, i) => (\n        <TableHeaderColumn\n          dataField={c}\n          key={c}\n          columnClassName={(\n            _: any,\n            { problems }: { problems: ProblemWithStatus[] }\n          ) => get_table_class(problems[i].status)}\n          dataFormat={(\n            _: any,\n            { problems }: { contest_id: string; problems: ProblemWithStatus[] }\n          ) => (\n            <a\n              href={Url.formatProblemUrl(\n                problems[i].id,\n                problems[i].contest_id\n              )}\n              target=\"_blank\"\n            >\n              {problems[i].title}\n            </a>\n          )}\n        >\n          {c}\n        </TableHeaderColumn>\n      ))}\n    </BootstrapTable>\n  </Row>\n);\n\nconst createAtCoderGrandContestTable = (\n  contests: Contest[],\n  problems: ProblemWithStatus[]\n) => {\n  const map = contests\n    .filter(c => c.id.match(/^agc\\d{3}$/))\n    .reduce(\n      (map, c) => map.set(c.id, []),\n      new Map<string, ProblemWithStatus[]>()\n    );\n\n  problems\n    .filter(p => p.id.match(/^agc\\d{3}_\\w$/))\n    .forEach(p => {\n      const contest_id = p.id.slice(0, 6);\n      const list = map.get(contest_id);\n      if (!list) {\n        throw `${contest_id} does not exist!`;\n      }\n      list.push(p);\n    });\n\n  return Array.from(map)\n    .map(([contest_id, problems]) => ({\n      contest_id,\n      problems: problems.sort((a, b) => a.id.localeCompare(b.id))\n    }))\n    .sort((a, b) => b.contest_id.localeCompare(a.contest_id));\n};\n\nconst filter = (regexp: RegExp, contests: Contest[]) =>\n  contests\n    .filter(c => c.id.match(regexp))\n    .reduce(\n      (map, c) => map.set(c.start_epoch_second, { contest: c, problems: [] }),\n      new Map<number, ContestAndProblems>()\n    );\n\nconst pushToMap = (\n  map: Map<number, ContestAndProblems>,\n  problems: ProblemWithStatus[]\n) => {\n  problems.forEach(p => {\n    const entry = map.get(p.contest.start_epoch_second);\n    if (entry) {\n      entry.problems.push(p);\n    }\n  });\n};\n\nconst sortMap = (map: Map<number, ContestAndProblems>) =>\n  Array.from(map.values())\n    .sort(\n      ({ contest: a }, { contest: b }) =>\n        b.start_epoch_second - a.start_epoch_second\n    )\n    .map(({ contest, problems }) => {\n      problems.sort((a, b) => a.id.localeCompare(b.id));\n      return { contest_id: contest.id, problems };\n    });\n\nconst createAtCoderBeginnerRegularContestTable = (\n  contests: Contest[],\n  problems: ProblemWithStatus[]\n) => {\n  const abc_map = filter(/^abc\\d{3}$/, contests);\n  const arc_map = filter(/^arc\\d{3}$/, contests);\n\n  pushToMap(abc_map, problems);\n  pushToMap(arc_map, problems);\n\n  const abc = sortMap(abc_map);\n  const arc = sortMap(arc_map);\n\n  return [abc, arc];\n};\n\nexport default TablePage;\n","import React from \"react\";\nimport { BootstrapTable, TableHeaderColumn } from \"react-bootstrap-table\";\n\nimport Submission from \"../../interfaces/Submission\";\nimport { formatDate } from \"../../utils/DateFormat\";\nimport * as Url from \"../../utils/Url\";\nimport { isAccepted } from \"../../utils\";\nimport { Badge } from \"reactstrap\";\nimport { string } from \"prop-types\";\n\nconst SubmissionList = ({\n  submissions,\n  problems\n}: {\n  submissions: Submission[];\n  problems: { id: string; title: string }[];\n}) => {\n  const title_map = problems.reduce(\n    (map, p) => map.set(p.id, p.title),\n    new Map<string, string>()\n  );\n  return (\n    <BootstrapTable\n      data={submissions.sort((a, b) => b.epoch_second - a.epoch_second)}\n      keyField=\"id\"\n      height=\"auto\"\n      hover\n      striped\n      pagination\n      options={{\n        paginationPosition: \"top\",\n        sizePerPage: 20,\n        sizePerPageList: [\n          {\n            text: \"20\",\n            value: 20\n          },\n          {\n            text: \"50\",\n            value: 50\n          },\n          {\n            text: \"100\",\n            value: 100\n          },\n          {\n            text: \"200\",\n            value: 200\n          },\n          {\n            text: \"All\",\n            value: submissions.length\n          }\n        ]\n      }}\n    >\n      <TableHeaderColumn\n        dataSort\n        dataField=\"epoch_second\"\n        dataFormat={(second: number) => formatDate(second)}\n      >\n        Date\n      </TableHeaderColumn>\n      <TableHeaderColumn\n        dataSort\n        dataField=\"problem_id\"\n        dataFormat={(_: string, { problem_id, contest_id }: Submission) => (\n          <a\n            target=\"_blank\"\n            href={Url.formatProblemUrl(problem_id, contest_id)}\n          >\n            {title_map.get(problem_id)}\n          </a>\n        )}\n      >\n        Problem\n      </TableHeaderColumn>\n      <TableHeaderColumn\n        dataSort\n        dataField=\"result\"\n        dataAlign=\"center\"\n        dataFormat={result =>\n          isAccepted(result) ? (\n            <Badge color=\"success\">{result}</Badge>\n          ) : (\n            <Badge color=\"warning\">{result}</Badge>\n          )\n        }\n      >\n        Status\n      </TableHeaderColumn>\n      <TableHeaderColumn dataSort dataField=\"language\">\n        Language\n      </TableHeaderColumn>\n      <TableHeaderColumn\n        dataSort\n        dataField=\"id\"\n        dataFormat={(_: number, { id, contest_id }: Submission) => (\n          <a target=\"_blank\" href={Url.formatSubmissionUrl(id, contest_id)}>\n            Detail\n          </a>\n        )}\n      >\n        Detail\n      </TableHeaderColumn>\n    </BootstrapTable>\n  );\n};\n\nexport default SubmissionList;\n","import React from \"react\";\nimport { Row, Col } from \"reactstrap\";\n\nimport * as Api from \"../../utils/Api\";\nimport Submission from \"../../interfaces/Submission\";\nimport UserInfo from \"../../interfaces/UserInfo\";\nimport MergedProblem from \"../../interfaces/MergedProblem\";\nimport { ordinalSuffixOf, isAccepted } from \"../../utils\";\nimport { formatDate } from \"../../utils/DateFormat\";\n\nimport ClimingLineChart from \"./ClimingLineChart\";\nimport DailyEffortBarChart from \"./DailyEffortBarChart\";\nimport SmallPieChart from \"./SmallPieChart\";\nimport FilteringHeatmap from \"./FilteringHeatmap\";\nimport SubmissionList from \"./SubmissionList\";\n\ninterface Props {\n  user_ids: string[];\n}\n\ninterface RankingEntry {\n  problem_count: number;\n  user_id: string;\n}\n\ninterface State {\n  first_ranking: RankingEntry[];\n  fast_ranking: RankingEntry[];\n  short_ranking: RankingEntry[];\n\n  problems: MergedProblem[];\n  submissions: Submission[];\n  user_info: UserInfo;\n\n  current_streak: number;\n  longest_streak: number;\n  last_ac: string;\n\n  daily_data: { date: number; count: number }[];\n}\n\nclass UserPage extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      first_ranking: [],\n      fast_ranking: [],\n      short_ranking: [],\n\n      problems: [],\n      submissions: [],\n      user_info: {\n        accepted_count: 1e9 + 7,\n        accepted_count_rank: 1e9 + 7,\n        rated_point_sum: 1e9 + 7,\n        rated_point_sum_rank: 1e9 + 7,\n        user_id: \"\"\n      },\n\n      current_streak: 1e9 + 7,\n      longest_streak: 1e9 + 7,\n      last_ac: \"\",\n\n      daily_data: []\n    };\n  }\n\n  componentDidMount() {\n    Api.fetchFirstRanking()\n      .then(ranking =>\n        ranking.sort((a, b) => b.problem_count - a.problem_count)\n      )\n      .then(first_ranking => this.setState({ first_ranking }));\n    Api.fetchShortRanking()\n      .then(ranking =>\n        ranking.sort((a, b) => b.problem_count - a.problem_count)\n      )\n      .then(short_ranking => this.setState({ short_ranking }));\n    Api.fetchFastRanking()\n      .then(ranking =>\n        ranking.sort((a, b) => b.problem_count - a.problem_count)\n      )\n      .then(fast_ranking => this.setState({ fast_ranking }));\n    Api.fetchMergedProblems().then(problems => this.setState({ problems }));\n    this.updateState(this.getUserIdFromProps());\n  }\n  componentDidUpdate(prevProps: Props) {\n    if (this.props !== prevProps) {\n      this.updateState(this.getUserIdFromProps());\n    }\n  }\n\n  updateState(user_id: string) {\n    Api.fetchSubmissions(user_id).then(submissions => {\n      const first_ac_map = submissions\n        .filter(s => isAccepted(s.result))\n        .sort((a, b) => b.epoch_second - a.epoch_second)\n        .reduce(\n          (map, s) => map.set(s.problem_id, s.epoch_second),\n          new Map<string, number>()\n        );\n      const { longest_streak, current_streak, last_ac } = get_streak(\n        first_ac_map\n      );\n      const date_count_map = Array.from(first_ac_map).reduce(\n        (map, [problem_id, second]) => {\n          const date = formatDate(second);\n          const count = map.get(date);\n          if (count) {\n            return map.set(date, count + 1);\n          } else {\n            return map.set(date, 1);\n          }\n        },\n        new Map<string, number>()\n      );\n      const daily_data = Array.from(date_count_map)\n        .map(([date, count]) => ({ date: new Date(date).getTime(), count }))\n        .sort((a, b) => a.date - b.date);\n      this.setState({\n        submissions,\n        longest_streak,\n        current_streak,\n        last_ac,\n        daily_data\n      });\n    });\n    Api.fetchUserInfo(user_id).then(user_info => this.setState({ user_info }));\n  }\n\n  getUserIdFromProps() {\n    return this.props.user_ids.length > 0 ? this.props.user_ids[0] : \"\";\n  }\n\n  render() {\n    const user_id = this.getUserIdFromProps();\n    if (user_id.length == 0) {\n      return <div />;\n    }\n\n    const {\n      submissions,\n      user_info,\n      longest_streak,\n      current_streak,\n      last_ac,\n      problems\n    } = this.state;\n\n    const shortest_rank = get_rank(user_id, this.state.short_ranking);\n    const fastest_rank = get_rank(user_id, this.state.fast_ranking);\n    const first_rank = get_rank(user_id, this.state.first_ranking);\n\n    const climing_data = this.state.daily_data.map(d => Object.assign({}, d));\n    climing_data.forEach((_, i) => {\n      if (i > 0) {\n        climing_data[i].count += climing_data[i - 1].count;\n      }\n    });\n\n    const ac_submissions = submissions.filter(\n      s => s.user_id === user_id && isAccepted(s.result)\n    );\n\n    const agc_solved = count_solved(/^agc\\d{3}_/, problems, ac_submissions);\n    const abc_solved = count_solved(/^abc\\d{3}_/, problems, ac_submissions);\n    const arc_solved = count_solved(/^arc\\d{3}_/, problems, ac_submissions);\n\n    const achievements = [\n      {\n        key: \"Accepted\",\n        value: user_info.accepted_count,\n        rank: user_info.accepted_count_rank\n      },\n      {\n        key: \"Shortest Code\",\n        value: shortest_rank.count,\n        rank: shortest_rank.rank\n      },\n      {\n        key: \"Fastest Code\",\n        value: fastest_rank.count,\n        rank: fastest_rank.rank\n      },\n      {\n        key: \"First AC\",\n        value: first_rank.count,\n        rank: first_rank.rank\n      }\n    ];\n\n    return (\n      <div>\n        <Row className=\"my-2 border-bottom\">\n          <h1>{user_id}</h1>\n        </Row>\n        <Row className=\"my-3\">\n          {achievements.map(({ key, value, rank }) => (\n            <Col key={key} className=\"text-center\">\n              <h6>{key}</h6>\n              <h3>{value}</h3>\n              <h6 className=\"text-muted\">{`${rank + 1}${ordinalSuffixOf(\n                rank + 1\n              )}`}</h6>\n            </Col>\n          ))}\n        </Row>\n        <Row className=\"my-3\">\n          <Col key=\"Rated Point Sum\" className=\"text-center\">\n            <h6>Rated Point Sum</h6>\n            <h3>{user_info.rated_point_sum} pt</h3>\n            <h6 className=\"text-muted\">{`${user_info.rated_point_sum_rank +\n              1}${ordinalSuffixOf(user_info.rated_point_sum + 1)}`}</h6>\n          </Col>\n          <Col key=\"Longest Streak\" className=\"text-center\">\n            <h6>Longest Streak</h6>\n            <h3>{longest_streak} days</h3>\n          </Col>\n          <Col key=\"Current Streak\" className=\"text-center\">\n            <h6>Current Streak</h6>\n            <h3>{current_streak} days</h3>\n            <h6 className=\"text-muted\">{`Last AC: ${last_ac}`}</h6>\n          </Col>\n          <Col />\n        </Row>\n\n        <Row className=\"my-2 border-bottom\">\n          <h1>AtCoder Beginner Contest</h1>\n        </Row>\n        <Row className=\"my-3\">\n          {abc_solved.map(({ solved, total }, i) => {\n            const key = \"ABCDEF\".split(\"\")[i];\n            return (\n              <Col key={key} className=\"text-center\" xs=\"3\">\n                <SmallPieChart\n                  accepted={solved}\n                  trying={total - solved}\n                  title={`Problem ${key}`}\n                />\n              </Col>\n            );\n          })}\n        </Row>\n\n        <Row className=\"my-2 border-bottom\">\n          <h1>AtCoder Regular Contest</h1>\n        </Row>\n        <Row className=\"my-3\">\n          {arc_solved.map(({ solved, total }, i) => {\n            const key = \"ABCDEF\".split(\"\")[i];\n            return (\n              <Col key={key} className=\"text-center\" xs=\"3\">\n                <SmallPieChart\n                  accepted={solved}\n                  trying={total - solved}\n                  title={`Problem ${key}`}\n                />\n              </Col>\n            );\n          })}\n        </Row>\n\n        <Row className=\"my-2 border-bottom\">\n          <h1>AtCoder Grand Contest</h1>\n        </Row>\n        <Row className=\"my-3\">\n          {agc_solved.map(({ solved, total }, i) => {\n            const key = \"ABCDEF\".split(\"\")[i];\n            return (\n              <Col key={key} className=\"text-center\" xs=\"2\">\n                <SmallPieChart\n                  accepted={solved}\n                  trying={total - solved}\n                  title={`Problem ${key}`}\n                />\n              </Col>\n            );\n          })}\n        </Row>\n\n        <Row className=\"my-2 border-bottom\">\n          <h1>Daily Effort</h1>\n        </Row>\n        <DailyEffortBarChart daily_data={this.state.daily_data} />\n\n        <Row className=\"my-2 border-bottom\">\n          <h1>Climing</h1>\n        </Row>\n        <ClimingLineChart climing_data={climing_data} />\n\n        <Row className=\"my-2 border-bottom\">\n          <h1>Heatmap</h1>\n        </Row>\n        <FilteringHeatmap\n          submissions={submissions.filter(s => s.user_id === user_id)}\n        />\n\n        <Row className=\"my-2 border-bottom\">\n          <h1>Submissions</h1>\n        </Row>\n        <SubmissionList\n          problems={problems}\n          submissions={submissions.filter(s => s.user_id === user_id)}\n        />\n      </div>\n    );\n  }\n}\n\nconst get_streak = (first_ac_map: Map<string, number>) => {\n  let longest_streak = 1;\n  let current_streak = 1;\n  const seconds = Array.from(first_ac_map)\n    .map(([problem_id, epoch_second]) => epoch_second)\n    .sort();\n  for (let index = 1; index < seconds.length; index++) {\n    const second1 = seconds[index - 1];\n    const second2 = seconds[index];\n    if (formatDate(second2) === formatDate(second1)) {\n      continue;\n    }\n    if (formatDate(second2) === formatDate(second1 + 24 * 3600)) {\n      current_streak += 1;\n    } else {\n      longest_streak = Math.max(longest_streak, current_streak);\n      current_streak = 1;\n    }\n  }\n  longest_streak = Math.max(longest_streak, current_streak);\n  const today = new Date().getTime() / 1000;\n  const last_ac_second = seconds[seconds.length - 1];\n\n  if (\n    formatDate(today) !== formatDate(last_ac_second) &&\n    formatDate(today) !== formatDate(last_ac_second + 24 * 3600)\n  ) {\n    current_streak = 0;\n  }\n  return {\n    longest_streak,\n    current_streak,\n    last_ac: formatDate(last_ac_second)\n  };\n};\n\nconst get_rank = (user_id: string, ranking: RankingEntry[]) => {\n  const rank = ranking.filter(rank => rank.user_id == user_id)[0];\n  if (!rank) {\n    return { count: 0, rank: ranking.length };\n  }\n  const { problem_count } = rank;\n  const index = ranking\n    .map(({ problem_count }, i) => {\n      return { count: problem_count, i };\n    })\n    .filter(({ count }) => count == problem_count)\n    .reduce((min, { i }) => Math.min(i, min), ranking.length);\n  return { count: ranking[index].problem_count, rank: index };\n};\n\nconst count_solved = (\n  prefix: RegExp,\n  problems: MergedProblem[],\n  ac_submissions: Submission[]\n) => {\n  const regexps = [/_[a1]/, /_[b2]/, /_[c3]/, /_[d4]/, /_[e5]/, /_[f6]/];\n  const count = (ids: string[]) => {\n    const c = [0, 0, 0, 0, 0, 0];\n    ids\n      .filter(id => id.match(prefix))\n      .forEach(id => {\n        regexps.forEach((e, i) => {\n          if (id.match(e)) {\n            c[i] += 1;\n          }\n        });\n      });\n    return c;\n  };\n\n  const total_count = count(problems.map(p => p.id));\n  const solved_count = count(\n    Array.from(\n      ac_submissions.reduce(\n        (set, s) => set.add(s.problem_id),\n        new Set<string>()\n      )\n    )\n  );\n\n  return total_count\n    .map((total, i) => ({\n      total: total,\n      solved: solved_count[i]\n    }))\n    .filter(({ total }) => total > 0);\n};\n\nexport default UserPage;\n","import React from \"react\";\nimport { NavLink as RouterLink } from \"react-router-dom\";\nimport { withRouter, RouteComponentProps } from \"react-router\";\nimport {\n  Navbar,\n  NavbarBrand,\n  Nav,\n  UncontrolledDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n  Form,\n  Input,\n  Button,\n  FormGroup\n} from \"reactstrap\";\n\nenum PageKind {\n  TABLE = \"table\",\n  LIST = \"list\",\n  USER = \"user\"\n}\n\ninterface State {\n  user_id: string;\n  rival_id: string;\n  kind: PageKind;\n}\n\nclass PrimitiveNavigationBar extends React.Component<\n  RouteComponentProps,\n  State\n> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      user_id: \"\",\n      rival_id: \"\",\n      kind: PageKind.TABLE\n    };\n  }\n\n  submit(nextKind: PageKind) {\n    this.setState({ kind: nextKind });\n    const { user_id, rival_id } = this.state;\n\n    const users: string[] = [];\n    if (user_id.match(/^[a-zA-Z0-9]*$/)) {\n      users.push(user_id);\n    }\n    if (rival_id.match(/^[a-zA-Z0-9,]+$/)) {\n      rival_id\n        .split(\",\")\n        .filter(user => user.length > 0)\n        .forEach(user => users.push(user));\n    }\n\n    const current_pathname = this.props.history.location.pathname;\n\n    const next_pathname = \"/\" + nextKind + \"/\" + users.join(\"/\");\n    if (current_pathname !== next_pathname) {\n      this.props.history.push(next_pathname);\n    }\n  }\n\n  componentDidMount() {\n    let kind = PageKind.TABLE;\n    const { pathname } = this.props.history.location;\n    if (pathname.match(/^\\/user/)) {\n      kind = PageKind.USER;\n    } else if (pathname.match(/^\\/list/)) {\n      kind = PageKind.LIST;\n    }\n\n    const params = pathname.split(\"/\");\n    const user_id = params.length >= 3 ? params[2] : \"\";\n    const rival_id = params\n      .slice(3)\n      .filter(x => x.length > 0)\n      .join(\",\");\n    this.setState({ kind, user_id, rival_id });\n  }\n\n  render() {\n    let root_url = \"/\";\n    if (this.state.user_id.length > 0 || this.state.rival_id.length > 0) {\n      root_url += \"table/\";\n    }\n    if (this.state.user_id.length > 0) {\n      root_url += this.state.user_id + \"/\";\n    }\n    if (this.state.rival_id.length > 0) {\n      root_url += this.state.rival_id\n        .split(\",\")\n        .filter(s => s.match(/^[0-9a-zA-Z_]+/))\n        .join(\"/\");\n    }\n    return (\n      <Navbar color=\"light\" light expand=\"md\">\n        <NavbarBrand tag={RouterLink} to={root_url}>\n          AtCoder Problems\n        </NavbarBrand>\n        <Nav className=\"ml-auto\" navbar>\n          <Form inline>\n            <FormGroup className=\"mb-2 mr-sm-2 mb-sm-0\">\n              <Input\n                style={{ width: \"150px\" }}\n                onKeyPress={e => {\n                  if (e.key == \"Enter\") {\n                    this.submit(this.state.kind);\n                  }\n                }}\n                value={this.state.user_id}\n                type=\"text\"\n                name=\"user_id\"\n                id=\"user_id\"\n                placeholder=\"User ID\"\n                onChange={e => this.setState({ user_id: e.target.value })}\n              />\n            </FormGroup>\n            <FormGroup className=\"mb-2 mr-sm-2 mb-sm-0\">\n              <Input\n                style={{ width: \"150px\" }}\n                onKeyPress={e => {\n                  if (e.key == \"Enter\") {\n                    this.submit(this.state.kind);\n                  }\n                }}\n                value={this.state.rival_id}\n                type=\"text\"\n                name=\"rival_id\"\n                id=\"rival_id\"\n                placeholder=\"Rival ID, ...\"\n                onChange={e => this.setState({ rival_id: e.target.value })}\n              />\n            </FormGroup>\n            <Button\n              className=\"mb-2 mr-sm-2 mb-sm-0\"\n              onClick={() => {\n                this.submit(PageKind.TABLE);\n              }}\n            >\n              Table\n            </Button>\n            <Button\n              className=\"mb-2 mr-sm-2 mb-sm-0\"\n              onClick={() => {\n                this.submit(PageKind.LIST);\n              }}\n            >\n              List\n            </Button>\n            <Button\n              className=\"mb-2 mr-sm-2 mb-sm-0\"\n              onClick={() => {\n                this.submit(PageKind.USER);\n              }}\n            >\n              User Page\n            </Button>\n          </Form>\n        </Nav>\n        <Nav className=\"ml-auto\" navbar>\n          <UncontrolledDropdown nav inNavbar>\n            <DropdownToggle nav caret>\n              Rankings\n            </DropdownToggle>\n            <DropdownMenu right>\n              <DropdownItem tag={RouterLink} to=\"/ac\">\n                AC Count\n              </DropdownItem>\n              <DropdownItem tag={RouterLink} to=\"/fast\">\n                Fastest Submissions\n              </DropdownItem>\n              <DropdownItem tag={RouterLink} to=\"/short\">\n                Shortest Submissions\n              </DropdownItem>\n              <DropdownItem tag={RouterLink} to=\"/first\">\n                First AC\n              </DropdownItem>\n              <DropdownItem tag={RouterLink} to=\"/sum\">\n                Rated Point Ranking\n              </DropdownItem>\n              <DropdownItem tag={RouterLink} to=\"/lang\">\n                Language Owners\n              </DropdownItem>\n            </DropdownMenu>\n          </UncontrolledDropdown>\n\n          <UncontrolledDropdown nav inNavbar>\n            <DropdownToggle nav caret>\n              Links\n            </DropdownToggle>\n            <DropdownMenu right>\n              <DropdownItem tag=\"a\" href=\"https://atcoder.jp/\" target=\"_blank\">\n                AtCoder\n              </DropdownItem>\n              <DropdownItem\n                tag=\"a\"\n                href=\"http://aoj-icpc.ichyo.jp/\"\n                target=\"_blank\"\n              >\n                AOJ-ICPC\n              </DropdownItem>\n              <DropdownItem\n                tag=\"a\"\n                href=\"https://github.com/kenkoooo/AtCoderProblems\"\n                target=\"_blank\"\n              >\n                GitHub\n              </DropdownItem>\n              <DropdownItem\n                tag=\"a\"\n                href=\"https://twitter.com/kenkoooo\"\n                target=\"_blank\"\n              >\n                @kenkoooo\n              </DropdownItem>\n            </DropdownMenu>\n          </UncontrolledDropdown>\n        </Nav>{\" \"}\n      </Navbar>\n    );\n  }\n}\n\nconst NavigationBar = withRouter(PrimitiveNavigationBar);\n\nexport default NavigationBar;\n","import React, { Component } from 'react';\nimport { HashRouter as Router, Route, Switch, Redirect, RouteComponentProps } from 'react-router-dom';\nimport { Container } from 'reactstrap';\n\nimport ACRanking from './pages/ACRanking';\nimport FastestRanking from './pages/FastestRanking';\nimport FirstRanking from './pages/FirstRanking';\nimport ShortRanking from './pages/ShortRanking';\nimport SumRanking from './pages/SumRanking';\nimport LanguageOwners from './pages/LanguageOwners';\nimport ListPage from './pages/ListPage';\nimport UserPage from './pages/UserPage';\nimport TablePage from './pages/TablePage';\n\nimport NavigationBar from './components/NavigationBar';\ntype MatchUserId = { match: { params: { user_id?: string } } };\nconst extractUserId = ({ match: { params: { user_id } } }: MatchUserId) => (user_id ? user_id.split('/') : []);\n\nclass App extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<Router>\n\t\t\t\t<div>\n\t\t\t\t\t<NavigationBar />\n\t\t\t\t\t<Container style={{ width: '100%', maxWidth: '90%' }}>\n\t\t\t\t\t\t<Switch>\n\t\t\t\t\t\t\t<Route exact path=\"/ac\" component={ACRanking} />\n\t\t\t\t\t\t\t<Route exact path=\"/fast\" component={FastestRanking} />\n\t\t\t\t\t\t\t<Route exact path=\"/short\" component={ShortRanking} />\n\t\t\t\t\t\t\t<Route exact path=\"/first\" component={FirstRanking} />\n\t\t\t\t\t\t\t<Route exact path=\"/sum\" component={SumRanking} />\n\t\t\t\t\t\t\t<Route exact path=\"/lang\" component={LanguageOwners} />\n\t\t\t\t\t\t\t<Route\n\t\t\t\t\t\t\t\tpath=\"/user/:user_id([a-zA-Z0-9]*)*\"\n\t\t\t\t\t\t\t\tcomponent={(props: MatchUserId) => <UserPage user_ids={extractUserId(props)} />}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<Route\n\t\t\t\t\t\t\t\tpath=\"/table/:user_id([a-zA-Z0-9]*)*\"\n\t\t\t\t\t\t\t\tcomponent={(props: MatchUserId) => <TablePage user_ids={extractUserId(props)} />}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<Route\n\t\t\t\t\t\t\t\tpath=\"/list/:user_id([a-zA-Z0-9]*)*\"\n\t\t\t\t\t\t\t\tcomponent={(props: MatchUserId) => <ListPage user_ids={extractUserId(props)} />}\n\t\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t\t<Redirect path=\"/\" to=\"/table\" />\n\t\t\t\t\t\t</Switch>\n\t\t\t\t\t</Container>\n\t\t\t\t</div>\n\t\t\t</Router>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'react-bootstrap-table/dist/react-bootstrap-table-all.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}