{"version":3,"sources":["utils/Api.tsx","components/Ranking.tsx","pages/ACRanking.tsx","pages/FastestRanking.tsx","pages/FirstRanking.tsx","pages/ShortRanking.tsx","pages/SumRanking.tsx","pages/LanguageOwners.tsx","utils/index.ts","utils/DateFormat.ts","utils/Url.tsx","pages/UserPage/FilteringHeatmap.tsx","pages/ListPage.tsx","pages/UserPage/ClimingLineChart.tsx","pages/UserPage/DailyEffortBarChart.tsx","pages/UserPage/SmallPieChart.tsx","components/CalendarHeatmap.tsx","pages/TablePage.tsx","pages/UserPage/SubmissionList.tsx","pages/UserPage/index.tsx","components/NavigationBar.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["BASE_URL","STATIC_API_BASE_URL","fetchRanking","url","fetch","then","r","json","fetchShortRanking","fetchFastRanking","fetchFirstRanking","fetchSumRanking","fetchContests","fetchMergedProblems","fetchSubmissions","user","concat","Ranking","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","_this2","users","sort","a","b","count","rank","cur","forEach","_","i","push","map","u","id","setState","react_default","createElement","Row","title","lib","height","pagination","striped","hover","options","paginationPosition","sizePerPage","sizePerPageList","text","value","length","dataField","isKey","React","Component","ACRanking","components_Ranking","rows","row","problem_count","user_id","FastestRanking","ApiUrl","FirstRanking","ShortRanking","SumRanking","point_sum","ordinalNumbers","OneOwner","className","entry","language","ranking","slice","Col","key","name","LanguageOwners","rankings","entries","Map","e","arr","get","set","Array","from","LanguageOwners_OneOwner","isAccepted","result","ordinalSuffixOf","j","k","formatDate","epoch_second","date","Date","year","getFullYear","month","getMonth","day","getDate","FilterStatus","formatContestUrl","contest","formatSubmissionUrl","formatProblemUrl","problem","ListPage","problems","Promise","all","Api","_ref","_ref2","slicedToArray","merged_problems","contest_map","reduce","point","predict","showing_point","contest_id","start_epoch_second","objectSpread","status","rivals","last_ac_date","localeCompare","updateProblems","user_ids","prevProps","prevState","_this3","flat","submissions","submission_map","submission","problem_id","s","new_status","mine","filter","some","new_rivals_set","includes","add","Set","new_rivals","new_ac_date","reverse","new_problem","assign","columns","header","dataSort","dataFormat","href","Url","target","dataAlign","Badge","color","cell","toFixed","fastest_submission_id","fastest_contest_id","fastest_user_id","execution_time","shortest_submission_id","shortest_contest_id","shortest_user_id","source_code_length","first_submission_id","first_contest_id","first_user_id","keyField","trClassName","c","ClimingLineChart","climing_data","es6","width","margin","top","right","left","bottom","strokeDasharray","dataKey","type","domain","tickFormatter","ms","labelFormatter","v","stroke","DailyEffortBarChart","daily_data","fill","COLORS","SmallPieChart","trying","accepted","outerRadius","CalendarHeatmap","next_sunday","getDay","setDate","current_date","WEEKS","count_map","undefined","table_data","viewBox","block_width","_ref3","Math","min","week","floor","x","y","_ref4","UncontrolledTooltip","delay","show","hide","placement","formatTooltip","Status","FilteringHeatmap","filter_status","AllSubmissions","filtered_submissions","AllAccepted","UniqueAccepted","values","ButtonGroup","Button","onClick","active","components_CalendarHeatmap","unit","SubmissionList","title_map","p","second","UserPage","first_ranking","fast_ranking","short_ranking","user_info","accepted_count","accepted_count_rank","rated_point_sum","rated_point_sum_rank","current_streak","longest_streak","last_ac","updateState","getUserIdFromProps","first_ac_map","_get_streak","get_streak","date_count_map","getTime","info","_this$state","shortest_rank","get_rank","fastest_rank","first_rank","d","ac_submissions","agc_solved","count_solved","abc_solved","arc_solved","achievements","_ref5","_ref6","solved","total","split","xs","UserPage_SmallPieChart","_ref7","_ref8","UserPage_DailyEffortBarChart","UserPage_ClimingLineChart","UserPage_FilteringHeatmap","UserPage_SubmissionList","seconds","_ref9","_ref10","index","second1","second2","max","today","last_ac_second","_ref11","_ref12","_ref13","prefix","regexps","ids","match","total_count","solved_count","_ref14","PageKind","get_table_class","Nothing","Solved","Trying","RivalSolved","TablePage","contests","initialProblems","_createAtCoderBeginne","createAtCoderBeginnerRegularContestTable","_createAtCoderBeginne2","abc","arc","agc","createAtCoderGrandContestTable","other_contest_map","list","other_contests","toUpperCase","columnClassName","TablePage_AtCoderRegularTable","TablePage_ContestTable","ContestTable","Table","bordered","responsive","AtCoderRegularTable","regexp","pushToMap","sortMap","_ref15","_ref16","abc_map","arc_map","PrimitiveNavigationBar","rival_id","kind","TABLE","nextKind","current_pathname","history","location","pathname","next_pathname","join","USER","LIST","params","root_url","Navbar","light","expand","NavbarBrand","tag","RouterLink","to","NavbarToggler","Collapse","navbar","Nav","Form","inline","FormGroup","Input","style","onKeyPress","submit","placeholder","onChange","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","DropdownMenu","DropdownItem","NavigationBar","withRouter","extractUserId","App","HashRouter","components_NavigationBar","Container","maxWidth","Switch","Route","exact","path","component","pages_UserPage","pages_TablePage","pages_ListPage","Redirect","Boolean","window","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.aaed50a1.chunk.js","sourcesContent":["import Contest from '../interfaces/Contest';\nimport Problem from '../interfaces/Problem';\nimport MergedProblem from '../interfaces/MergedProblem';\nimport UserInfo from '../interfaces/UserInfo';\nimport Submission from '../interfaces/Submission';\n\nconst BASE_URL = 'https://kenkoooo.com/atcoder';\nconst STATIC_API_BASE_URL = BASE_URL + '/resources';\nconst DYNAMIC_API_BASE_URL = BASE_URL + '/atcoder-api';\n\nconst AC_COUNT_URL = STATIC_API_BASE_URL + '/ac.json';\nconst SHORT_COUNT_URL = STATIC_API_BASE_URL + '/short.json';\nconst FAST_COUNT_URL = STATIC_API_BASE_URL + '/fast.json';\nconst FIRST_COUNT_URL = STATIC_API_BASE_URL + '/first.json';\nconst SUM_URL = STATIC_API_BASE_URL + '/sums.json';\nconst LANG_URL = STATIC_API_BASE_URL + '/lang.json';\n\ninterface RankingEntry {\n\tproblem_count: number;\n\tuser_id: string;\n}\n\nconst fetchRanking = (url: string) => fetch(url).then((r) => r.json()).then((r) => r as RankingEntry[]);\n\nexport const fetchACRanking = () => fetchRanking(AC_COUNT_URL);\nexport const fetchShortRanking = () => fetchRanking(SHORT_COUNT_URL);\nexport const fetchFastRanking = () => fetchRanking(FAST_COUNT_URL);\nexport const fetchFirstRanking = () => fetchRanking(FIRST_COUNT_URL);\nexport const fetchSumRanking = () =>\n\tfetch(SUM_URL).then((r) => r.json()).then(\n\t\t(r) =>\n\t\t\tr as {\n\t\t\t\tuser_id: string;\n\t\t\t\tpoint_sum: number;\n\t\t\t}[]\n\t);\nexport const fetchLangRanking = () =>\n\tfetch(LANG_URL).then((r) => r.json()).then(\n\t\t(r) =>\n\t\t\tr as {\n\t\t\t\tuser_id: string;\n\t\t\t\tcount: number;\n\t\t\t\tlanguage: string;\n\t\t\t}[]\n\t);\n\nexport const fetchContests = () =>\n\tfetch(STATIC_API_BASE_URL + '/contests.json').then((r) => r.json()).then((r) => r as Contest[]);\nexport const fetchProblems = () =>\n\tfetch(STATIC_API_BASE_URL + '/problems.json').then((r) => r.json()).then((r) => r as Problem[]);\nexport const fetchMergedProblems = () =>\n\tfetch(STATIC_API_BASE_URL + '/merged-problems.json').then((r) => r.json()).then((r) => r as MergedProblem[]);\nexport const fetchUserInfo = (user: string) =>\n\tfetch(`${DYNAMIC_API_BASE_URL}/v2/user_info?user=${user}`).then((r) => r.json()).then((info) => info as UserInfo);\nexport const fetchSubmissions = (user: string) =>\n\tfetch(`${DYNAMIC_API_BASE_URL}/results?user=${user}`).then((r) => r.json()).then((r) => r as Submission[]);\n","import React from 'react';\nimport { Row } from 'reactstrap';\nimport { BootstrapTable, TableHeaderColumn } from 'react-bootstrap-table';\n\ninterface Props {\n\ttitle: string;\n\tfetch: (() => Promise<{ count: number; id: string }[]>);\n}\n\ninterface User {\n\tcount: number;\n\tid: string;\n\trank: number;\n}\n\ninterface State {\n\tdata: User[];\n}\n\nclass Ranking extends React.Component<Props, State> {\n\tconstructor(props: any) {\n\t\tsuper(props);\n\t\tthis.state = { data: [] };\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.props.fetch().then((users) => {\n\t\t\tusers.sort((a, b) => b.count - a.count);\n\t\t\tconst rank: number[] = [];\n\t\t\tlet cur = 1;\n\t\t\tusers.forEach((_, i) => {\n\t\t\t\tif (i > 0 && users[i].count < users[i - 1].count) {\n\t\t\t\t\tcur = i + 1;\n\t\t\t\t}\n\t\t\t\trank.push(cur);\n\t\t\t});\n\t\t\tconst data = users.map((u, i) => ({\n\t\t\t\tcount: u.count,\n\t\t\t\tid: u.id,\n\t\t\t\trank: rank[i]\n\t\t\t}));\n\t\t\tthis.setState({ data });\n\t\t});\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<Row>\n\t\t\t\t<h2>{this.props.title}</h2>\n\t\t\t\t<BootstrapTable\n\t\t\t\t\theight=\"auto\"\n\t\t\t\t\tdata={this.state.data}\n\t\t\t\t\tpagination\n\t\t\t\t\tstriped\n\t\t\t\t\thover\n\t\t\t\t\toptions={{\n\t\t\t\t\t\tpaginationPosition: 'top',\n\t\t\t\t\t\tsizePerPage: 20,\n\t\t\t\t\t\tsizePerPageList: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttext: '20',\n\t\t\t\t\t\t\t\tvalue: 20\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttext: '50',\n\t\t\t\t\t\t\t\tvalue: 50\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttext: '100',\n\t\t\t\t\t\t\t\tvalue: 100\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttext: '200',\n\t\t\t\t\t\t\t\tvalue: 200\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttext: 'All',\n\t\t\t\t\t\t\t\tvalue: this.state.data.length\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<TableHeaderColumn dataField=\"rank\">#</TableHeaderColumn>\n\t\t\t\t\t<TableHeaderColumn dataField=\"id\" isKey>\n\t\t\t\t\t\tUser\n\t\t\t\t\t</TableHeaderColumn>\n\t\t\t\t\t<TableHeaderColumn dataField=\"count\">Count</TableHeaderColumn>\n\t\t\t\t</BootstrapTable>\n\t\t\t</Row>\n\t\t);\n\t}\n}\n\nexport default Ranking;\n","import React from 'react';\nimport * as ApiUrl from '../utils/Api';\nimport Ranking from '../components/Ranking';\n\nconst ACRanking = () => (\n\t<Ranking\n\t\ttitle=\"AC Count Ranking\"\n\t\tfetch={() =>\n\t\t\tApiUrl.fetchACRanking().then((rows) => rows.map((row) => ({ count: row.problem_count, id: row.user_id })))}\n\t/>\n);\n\nexport default ACRanking;\n","import React from 'react';\nimport * as ApiUrl from \"../utils/Api\";\nimport Ranking from \"../components/Ranking\";\n\nconst FastestRanking = () => (\n    <Ranking\n        title=\"Fastest Submission Ranking\"\n        fetch={() => ApiUrl.fetchFastRanking().then(rows => rows.map(row => ({ count: row.problem_count, id: row.user_id })))}\n\n    />\n);\n\nexport default FastestRanking;\n","import React from 'react';\nimport * as ApiUrl from \"../utils/Api\";\nimport Ranking from \"../components/Ranking\";\n\nconst FirstRanking = () => (\n    <Ranking\n        title=\"First AC Ranking\"\n        fetch={() => ApiUrl.fetchFirstRanking().then(rows => rows.map(row => ({ count: row.problem_count, id: row.user_id })))}\n    />\n);\n\nexport default FirstRanking;\n","import React from 'react';\nimport * as ApiUrl from \"../utils/Api\";\nimport Ranking from \"../components/Ranking\";\n\nconst ShortRanking = () => (\n    <Ranking\n        title=\"Top Golfers\"\n        fetch={() => ApiUrl.fetchShortRanking().then(rows => rows.map(row => ({ count: row.problem_count, id: row.user_id })))}\n\n    />\n);\n\nexport default ShortRanking;\n","import React from 'react';\nimport * as ApiUrl from \"../utils/Api\";\nimport Ranking from \"../components/Ranking\";\n\nconst SumRanking = () => (\n    <Ranking\n        title=\"Rated Point Ranking\"\n        fetch={() => ApiUrl.fetchSumRanking().then(rows => rows.map(row => ({ count: row.point_sum, id: row.user_id })))}\n    />\n);\n\nexport default SumRanking;\n","import React from \"react\";\nimport { Row, Col } from \"reactstrap\";\n\nimport * as Api from \"../utils/Api\";\n\nconst ordinalNumbers = [\"1st\", \"2nd\", \"3rd\"];\n\ninterface Ranking {\n  language: string;\n  ranking: { name: string; count: number }[];\n}\n\nconst OneOwner = (props: { entry: Ranking }) => (\n  <div>\n    <Row className=\"justify-content-center my-2 border-bottom\">\n      <h1>{props.entry.language}</h1>\n    </Row>\n    <Row>\n      {props.entry.ranking.slice(0, 3).map((rank, i) => (\n        <Col key={rank.name} className=\"text-center\">\n          <h5>{ordinalNumbers[i]}</h5>\n          <h3>{rank.name}</h3>\n          <h5 className=\"text-muted\">{rank.count} AC</h5>\n        </Col>\n      ))}\n    </Row>\n  </div>\n);\n\ninterface State {\n  rankings: Ranking[];\n}\n\nclass LanguageOwners extends React.Component<{}, State> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      rankings: []\n    };\n  }\n\n  componentDidMount() {\n    Api.fetchLangRanking().then(entries => {\n      const map: Map<string, { name: string; count: number }[]> = new Map();\n      entries.forEach(entry => {\n        const e = {\n          name: entry.user_id,\n          count: entry.count\n        };\n        const arr = map.get(entry.language);\n        if (arr) {\n          arr.push(e);\n        } else {\n          map.set(entry.language, [e]);\n        }\n      });\n\n      const rankings = Array.from(map).map(entry => ({\n        language: entry[0],\n        ranking: entry[1]\n      }));\n      rankings.forEach(ranking =>\n        ranking.ranking.sort((a, b) => b.count - a.count)\n      );\n      this.setState({ rankings });\n    });\n  }\n  render() {\n    return (\n      <div>\n        {this.state.rankings.map(entry => (\n          <OneOwner key={entry.language} entry={entry} />\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default LanguageOwners;\n","export const isAccepted = (result: string) => result === 'AC';\nexport const ordinalSuffixOf = (i: number) => {\n\tconst j = i % 10;\n\tconst k = i % 100;\n\tif (j == 1 && k != 11) {\n\t\treturn 'st';\n\t}\n\tif (j == 2 && k != 12) {\n\t\treturn 'nd';\n\t}\n\tif (j == 3 && k != 13) {\n\t\treturn 'rd';\n\t}\n\treturn 'th';\n};\n","export function formatDate(epoch_second: number) {\n\tconst date = new Date(epoch_second * 1000);\n\tconst year = date.getFullYear();\n\tconst month = date.getMonth() + 1;\n\tconst day = date.getDate();\n\tconst month_str = month < 10 ? '0' + month : month;\n\tconst day_str = day < 10 ? '0' + day : day;\n\treturn year + '-' + month_str + '-' + day_str;\n}\n","const BASE_URL = 'https://atcoder.jp';\n\nexport const formatContestUrl = (contest: string) => `${BASE_URL}/contests/${contest}`;\n\nexport const formatSubmissionUrl = (id: number, contest: string) => `${formatContestUrl(contest)}/submissions/${id}`;\n\nexport const formatProblemUrl = (problem: string, contest: string) => `${formatContestUrl(contest)}/tasks/${problem}`;\n\nexport const formatSolversUrl = (contest: string, problem: string) =>\n\t`${formatContestUrl(contest)}/submissions?f.Task=${problem}&f.Status=AC`;\n","import React from \"react\";\nimport { ButtonGroup, Button, Row } from \"reactstrap\";\n\nimport CalendarHeatmap from \"../../components/CalendarHeatmap\";\nimport Submission from \"../../interfaces/Submission\";\nimport { isAccepted } from \"../../utils\";\n\nenum FilterStatus {\n  AllSubmissions,\n  AllAccepted,\n  UniqueAccepted\n}\n\ninterface Props {\n  submissions: Submission[];\n}\n\ninterface State {\n  filter_status: FilterStatus;\n}\n\nclass FilteringHeatmap extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      filter_status: FilterStatus.AllSubmissions\n    };\n  }\n\n  render() {\n    const filtered_submissions = ((filter_status: FilterStatus) => {\n      switch (filter_status) {\n        case FilterStatus.AllSubmissions:\n          return this.props.submissions;\n        case FilterStatus.AllAccepted:\n          return this.props.submissions.filter(s => isAccepted(s.result));\n        case FilterStatus.UniqueAccepted:\n          const map = this.props.submissions\n            .filter(s => isAccepted(s.result))\n            .sort((a, b) => b.epoch_second - a.epoch_second)\n            .reduce(\n              (map, s) => map.set(s.problem_id, s),\n              new Map<string, Submission>()\n            );\n          return Array.from(map.values());\n        default:\n          throw \"unreachable\";\n      }\n    })(this.state.filter_status);\n\n    return (\n      <div>\n        <Row className=\"my-2\">\n          <ButtonGroup>\n            <Button\n              onClick={() =>\n                this.setState({ filter_status: FilterStatus.AllSubmissions })\n              }\n              active={this.state.filter_status === FilterStatus.AllSubmissions}\n            >\n              All Submissions\n            </Button>\n            <Button\n              onClick={() =>\n                this.setState({ filter_status: FilterStatus.AllAccepted })\n              }\n              active={this.state.filter_status === FilterStatus.AllAccepted}\n            >\n              All AC\n            </Button>\n            <Button\n              onClick={() =>\n                this.setState({ filter_status: FilterStatus.UniqueAccepted })\n              }\n              active={this.state.filter_status === FilterStatus.UniqueAccepted}\n            >\n              Unique AC\n            </Button>\n          </ButtonGroup>\n        </Row>\n        <Row>\n          <CalendarHeatmap\n            data={filtered_submissions.map(\n              s => new Date(s.epoch_second * 1000)\n            )}\n            formatTooltip={(date: string, count: number) => {\n              let unit = \"\";\n              if (this.state.filter_status === FilterStatus.AllAccepted) {\n                unit = \"AC\";\n              } else if (\n                this.state.filter_status == FilterStatus.AllSubmissions\n              ) {\n                unit = \"Submissions\";\n              } else {\n                unit = \"Unique AC\";\n              }\n              return `${date} ${count} ${unit}`;\n            }}\n          />\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default FilteringHeatmap;\n","import React from 'react';\nimport { BootstrapTable, TableHeaderColumn } from 'react-bootstrap-table';\nimport { Badge } from 'reactstrap';\n\nimport { isAccepted } from '../utils';\nimport { formatDate } from '../utils/DateFormat';\nimport * as Api from '../utils/Api';\nimport * as Url from '../utils/Url';\nimport MergedProblem from '../interfaces/MergedProblem';\nimport Contest from '../interfaces/Contest';\nimport Submission from '../interfaces/Submission';\n\nconst INF_POINT = 1e18;\n\ninterface Problem extends MergedProblem {\n\tshowing_point: number;\n\tdate: string;\n\n\tcontest: Contest;\n\n\tstatus: string;\n\trivals: string[];\n\n\tlast_ac_date: string;\n}\n\ninterface Props {\n\tuser_ids: string[];\n}\n\ninterface State {\n\tproblems: Problem[];\n}\n\nclass ListPage extends React.Component<Props, State> {\n\tconstructor(props: any) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tproblems: []\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\tPromise.all([ Api.fetchMergedProblems(), Api.fetchContests() ]).then(([ merged_problems, contests ]) => {\n\t\t\tconst contest_map = contests.reduce(\n\t\t\t\t(map, contest) => map.set(contest.id, contest),\n\t\t\t\tnew Map<string, Contest>()\n\t\t\t);\n\n\t\t\tconst problems: Problem[] = merged_problems.map((problem) => {\n\t\t\t\tconst { point, predict } = problem;\n\t\t\t\tconst showing_point = point ? point : predict ? predict : INF_POINT;\n\n\t\t\t\tconst contest = (() => {\n\t\t\t\t\tconst contest = contest_map.get(problem.contest_id);\n\t\t\t\t\tif (contest) {\n\t\t\t\t\t\treturn contest;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow `${problem.id} is not belonged to any contest.`;\n\t\t\t\t\t}\n\t\t\t\t})();\n\n\t\t\t\tconst date = formatDate(contest.start_epoch_second);\n\n\t\t\t\tconst status = '';\n\t\t\t\tconst rivals: string[] = [];\n\t\t\t\tconst last_ac_date = '';\n\n\t\t\t\treturn { status, showing_point, contest, date, rivals, last_ac_date, ...problem };\n\t\t\t});\n\n\t\t\tproblems.sort((a, b) => {\n\t\t\t\tif (a.contest.start_epoch_second == b.contest.start_epoch_second) {\n\t\t\t\t\treturn b.title.localeCompare(a.title);\n\t\t\t\t} else {\n\t\t\t\t\treturn b.contest.start_epoch_second - a.contest.start_epoch_second;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis.setState({ problems }, () => this.updateProblems(this.props.user_ids));\n\t\t});\n\t}\n\n\tcomponentDidUpdate(prevProps: Props, prevState: State) {\n\t\tif (prevProps.user_ids !== this.props.user_ids) {\n\t\t\tthis.updateProblems(this.props.user_ids);\n\t\t}\n\t}\n\n\tupdateProblems(user_ids: string[]) {\n\t\treturn Promise.all(user_ids.map(Api.fetchSubmissions)).then((r) => r.flat()).then((submissions) => {\n\t\t\tconst submission_map = submissions\n\t\t\t\t.sort((a, b) => a.epoch_second - b.epoch_second)\n\t\t\t\t.reduce((map, submission) => {\n\t\t\t\t\tconst arr = map.get(submission.problem_id);\n\t\t\t\t\tif (arr) {\n\t\t\t\t\t\tarr.push(submission);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmap.set(submission.problem_id, [ submission ]);\n\t\t\t\t\t}\n\t\t\t\t\treturn map;\n\t\t\t\t}, new Map<string, Submission[]>());\n\n\t\t\tconst user = user_ids.length > 0 ? user_ids[0] : '';\n\t\t\tconst rivals = this.props.user_ids.slice(1);\n\n\t\t\tconst problems = this.state.problems.map((problem) => {\n\t\t\t\tconst submissions = (() => {\n\t\t\t\t\tconst s = submission_map.get(problem.id);\n\t\t\t\t\treturn s ? s : [];\n\t\t\t\t})();\n\n\t\t\t\tconst new_status = (() => {\n\t\t\t\t\tconst mine = submissions.filter((s) => s.user_id === user);\n\t\t\t\t\tif (mine.some((s) => isAccepted(s.result))) {\n\t\t\t\t\t\treturn 'AC';\n\t\t\t\t\t} else if (mine.length > 0) {\n\t\t\t\t\t\treturn mine[mine.length - 1].result;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t})();\n\n\t\t\t\tconst new_rivals_set = (() =>\n\t\t\t\t\tsubmissions\n\t\t\t\t\t\t.filter((s) => rivals.includes(s.user_id))\n\t\t\t\t\t\t.filter((s) => isAccepted(s.result))\n\t\t\t\t\t\t.reduce((set, submission) => set.add(submission.user_id), new Set<string>()))();\n\t\t\t\tconst new_rivals = Array.from(new_rivals_set).sort();\n\t\t\t\tconst new_ac_date = (() => {\n\t\t\t\t\tlet s = submissions.filter((s) => s.user_id === user).filter((s) => isAccepted(s.result)).reverse();\n\t\t\t\t\tif (s.length > 0) {\n\t\t\t\t\t\treturn formatDate(s[0].epoch_second);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t})();\n\t\t\t\tif (\n\t\t\t\t\tnew_status !== problem.status ||\n\t\t\t\t\tnew_rivals !== problem.rivals ||\n\t\t\t\t\tnew_ac_date !== problem.last_ac_date\n\t\t\t\t) {\n\t\t\t\t\tconst new_problem = Object.assign({}, problem);\n\t\t\t\t\tnew_problem.rivals = new_rivals;\n\t\t\t\t\tnew_problem.status = new_status;\n\t\t\t\t\tnew_problem.last_ac_date = new_ac_date;\n\t\t\t\t\treturn new_problem;\n\t\t\t\t} else {\n\t\t\t\t\treturn problem;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis.setState({ problems });\n\t\t});\n\t}\n\n\trender() {\n\t\tconst columns: {\n\t\t\theader: string;\n\t\t\tdataField: string;\n\t\t\tdataSort?: boolean;\n\t\t\tdataAlign?: 'center';\n\t\t\tdataFormat?: (cell: any, row: Problem) => JSX.Element;\n\t\t}[] = [\n\t\t\t{\n\t\t\t\theader: 'Date',\n\t\t\t\tdataField: 'date'\n\t\t\t},\n\t\t\t{\n\t\t\t\theader: 'Problem',\n\t\t\t\tdataField: 'title',\n\t\t\t\tdataSort: true,\n\t\t\t\tdataFormat: (_: string, row: Problem) => (\n\t\t\t\t\t<a href={Url.formatProblemUrl(row.id, row.contest_id)} target=\"_blank\">\n\t\t\t\t\t\t{row.title}\n\t\t\t\t\t</a>\n\t\t\t\t)\n\t\t\t},\n\t\t\t{\n\t\t\t\theader: 'Contest',\n\t\t\t\tdataField: 'contest_id',\n\t\t\t\tdataSort: true,\n\t\t\t\tdataFormat: (contest_id: string, problem: Problem) => (\n\t\t\t\t\t<a href={Url.formatContestUrl(contest_id)} target=\"_blank\">\n\t\t\t\t\t\t{problem.contest.title}\n\t\t\t\t\t</a>\n\t\t\t\t)\n\t\t\t},\n\t\t\t{\n\t\t\t\theader: 'Result',\n\t\t\t\tdataField: 'id',\n\t\t\t\tdataAlign: 'center',\n\t\t\t\tdataFormat: (id: string, problem: Problem) => {\n\t\t\t\t\tif (isAccepted(problem.status)) {\n\t\t\t\t\t\treturn <Badge color=\"success\">AC</Badge>;\n\t\t\t\t\t} else if (problem.rivals.length > 0) {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t{problem.rivals.map((r) => (\n\t\t\t\t\t\t\t\t\t<Badge key={r} color=\"danger\">\n\t\t\t\t\t\t\t\t\t\t{r}\n\t\t\t\t\t\t\t\t\t</Badge>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn <Badge color=\"warning\">{problem.status}</Badge>;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\theader: 'Last AC Date',\n\t\t\t\tdataField: 'last_ac_date',\n\t\t\t\tdataSort: true\n\t\t\t},\n\t\t\t{\n\t\t\t\theader: 'Solvers',\n\t\t\t\tdataField: 'solver_count',\n\t\t\t\tdataSort: true,\n\t\t\t\tdataFormat: (cell: number, row: Problem) => (\n\t\t\t\t\t<a href={Url.formatSolversUrl(row.contest_id, row.id)} target=\"_blank\">\n\t\t\t\t\t\t{cell}\n\t\t\t\t\t</a>\n\t\t\t\t)\n\t\t\t},\n\t\t\t{\n\t\t\t\theader: 'Point',\n\t\t\t\tdataField: 'showing_point',\n\t\t\t\tdataSort: true,\n\t\t\t\tdataFormat: (showing_point: any) => {\n\t\t\t\t\tif (showing_point >= INF_POINT) {\n\t\t\t\t\t\treturn '-';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (showing_point % 100 == 0) {\n\t\t\t\t\t\t\treturn showing_point;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn showing_point.toFixed(2);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\theader: 'Fastest',\n\t\t\t\tdataField: 'execution_time',\n\t\t\t\tdataSort: true,\n\t\t\t\tdataFormat: (_: number, row: Problem) => (\n\t\t\t\t\t<a\n\t\t\t\t\t\thref={Url.formatSubmissionUrl(row.fastest_submission_id, row.fastest_contest_id)}\n\t\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\t>\n\t\t\t\t\t\t{row.fastest_user_id} ({row.execution_time} ms)\n\t\t\t\t\t</a>\n\t\t\t\t)\n\t\t\t},\n\t\t\t{\n\t\t\t\theader: 'Shortest',\n\t\t\t\tdataField: 'source_code_length',\n\t\t\t\tdataSort: true,\n\t\t\t\tdataFormat: (_: number, row: Problem) => (\n\t\t\t\t\t<a\n\t\t\t\t\t\thref={Url.formatSubmissionUrl(row.shortest_submission_id, row.shortest_contest_id)}\n\t\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\t>\n\t\t\t\t\t\t{row.shortest_user_id} ({row.source_code_length} Bytes)\n\t\t\t\t\t</a>\n\t\t\t\t)\n\t\t\t},\n\t\t\t{\n\t\t\t\theader: 'First',\n\t\t\t\tdataField: 'first_user_id',\n\t\t\t\tdataSort: true,\n\t\t\t\tdataFormat: (_: string, row: Problem) => (\n\t\t\t\t\t<a href={Url.formatSubmissionUrl(row.first_submission_id, row.first_contest_id)} target=\"_blank\">\n\t\t\t\t\t\t{row.first_user_id}\n\t\t\t\t\t</a>\n\t\t\t\t)\n\t\t\t}\n\t\t];\n\t\treturn (\n\t\t\t<BootstrapTable\n\t\t\t\tpagination\n\t\t\t\tkeyField=\"id\"\n\t\t\t\theight=\"auto\"\n\t\t\t\thover\n\t\t\t\tstriped\n\t\t\t\ttrClassName={(problem: Problem) => {\n\t\t\t\t\tif (isAccepted(problem.status)) {\n\t\t\t\t\t\treturn 'table-success';\n\t\t\t\t\t} else if (problem.rivals.length > 0) {\n\t\t\t\t\t\treturn 'table-danger';\n\t\t\t\t\t} else if (problem.status.length > 0) {\n\t\t\t\t\t\treturn 'table-warning';\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t}}\n\t\t\t\tdata={this.state.problems}\n\t\t\t\toptions={{\n\t\t\t\t\tpaginationPosition: 'top',\n\t\t\t\t\tsizePerPage: 20,\n\t\t\t\t\tsizePerPageList: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttext: '20',\n\t\t\t\t\t\t\tvalue: 20\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttext: '50',\n\t\t\t\t\t\t\tvalue: 50\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttext: '100',\n\t\t\t\t\t\t\tvalue: 100\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttext: '200',\n\t\t\t\t\t\t\tvalue: 200\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttext: 'All',\n\t\t\t\t\t\t\tvalue: this.state.problems.length\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{columns.map((c) => (\n\t\t\t\t\t<TableHeaderColumn key={c.header} {...c}>\n\t\t\t\t\t\t{c.header}\n\t\t\t\t\t</TableHeaderColumn>\n\t\t\t\t))}\n\t\t\t</BootstrapTable>\n\t\t);\n\t}\n}\n\nexport default ListPage;\n","import React from \"react\";\nimport { Row } from \"reactstrap\";\nimport {\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  LineChart,\n  Line,\n  ResponsiveContainer\n} from \"recharts\";\n\nimport { formatDate } from \"../../utils/DateFormat\";\n\nconst ClimingLineChart = ({\n  climing_data\n}: {\n  climing_data: { date: number; count: number }[];\n}) => (\n  <Row className=\"my-3\">\n    <ResponsiveContainer width=\"100%\" height={300}>\n      <LineChart\n        data={climing_data}\n        margin={{\n          top: 5,\n          right: 30,\n          left: 20,\n          bottom: 5\n        }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis\n          dataKey=\"date\"\n          type=\"number\"\n          domain={[\"dataMin\", \"dataMax\"]}\n          tickFormatter={(ms: number) => formatDate(ms / 1000)}\n        />\n        <YAxis />\n        <Tooltip labelFormatter={(v: any) => formatDate(v / 1000)} />\n        <Line dataKey=\"count\" stroke=\"#8884d8\" />\n      </LineChart>\n    </ResponsiveContainer>\n  </Row>\n);\nexport default ClimingLineChart;\n","import React from \"react\";\nimport { Row } from \"reactstrap\";\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer\n} from \"recharts\";\n\nimport { formatDate } from \"../../utils/DateFormat\";\n\nconst DailyEffortBarChart = ({\n  daily_data\n}: {\n  daily_data: { date: number; count: number }[];\n}) => (\n  <Row className=\"my-3\">\n    <ResponsiveContainer width=\"100%\" height={300}>\n      <BarChart\n        data={daily_data}\n        margin={{\n          top: 5,\n          right: 30,\n          left: 20,\n          bottom: 5\n        }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis\n          dataKey=\"date\"\n          type=\"number\"\n          domain={[\"dataMin\", \"dataMax\"]}\n          tickFormatter={(ms: number) => formatDate(ms / 1000)}\n        />\n        <YAxis />\n        <Tooltip labelFormatter={(v: any) => formatDate(v / 1000)} />\n        <Bar dataKey=\"count\" fill=\"#8884d8\" />\n      </BarChart>\n    </ResponsiveContainer>\n  </Row>\n);\n\nexport default DailyEffortBarChart;\n","import React from \"react\";\nimport {\n  PieChart,\n  Pie,\n  ResponsiveContainer,\n  Cell,\n  Tooltip,\n  Legend\n} from \"recharts\";\n\nconst COLORS = {\n  Accepted: \"#32cd32\",\n  Trying: \"#58616a\"\n};\n\nconst SmallPieChart = ({\n  title,\n  trying,\n  accepted\n}: {\n  title: string;\n  trying: number;\n  accepted: number;\n}) => {\n  const data = [\n    { value: accepted, color: COLORS.Accepted, name: \"Accepted\" },\n    { value: trying, color: COLORS.Trying, name: \"Trying\" }\n  ];\n  return (\n    <div>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <PieChart>\n          <Pie dataKey=\"value\" data={data} outerRadius=\"80%\" fill=\"#ff0000\">\n            {data.map((e, i) => (\n              <Cell key={e.name} fill={e.color} />\n            ))}\n          </Pie>\n          <Tooltip />\n          <Legend />\n        </PieChart>\n      </ResponsiveContainer>\n      <h5>{title}</h5>\n      <h5 className=\"text-muted\">{`${accepted} / ${accepted + trying}`}</h5>\n    </div>\n  );\n};\n\nexport default SmallPieChart;\n","import React from 'react';\nimport { UncontrolledTooltip } from 'reactstrap';\n\nconst WEEKDAY = 7;\nconst WEEKS = 53;\nconst COLORS = [ '#ebedf0', '#c6e48b', '#7bc96f', '#239a3b', '#196127' ];\n\nconst formatDate = (date: Date) => {\n\tconst year = date.getFullYear();\n\tconst month = date.getMonth() + 1;\n\tconst day = date.getDate();\n\tconst month_str = month < 10 ? '0' + month : month;\n\tconst day_str = day < 10 ? '0' + day : day;\n\treturn year + '-' + month_str + '-' + day_str;\n};\n\nconst CalendarHeatmap = (props: { data: Date[]; formatTooltip?: (date: string, count: number) => string }) => {\n\tconst next_sunday = new Date();\n\twhile (next_sunday.getDay() != 0) {\n\t\tnext_sunday.setDate(next_sunday.getDate() + 1);\n\t}\n\n\tconst current_date = new Date(next_sunday);\n\tcurrent_date.setDate(current_date.getDate() - WEEKS * WEEKDAY);\n\n\tconst count_map = new Map<string, number>();\n\twhile (formatDate(current_date) !== formatDate(next_sunday)) {\n\t\tcount_map.set(formatDate(current_date), 0);\n\t\tcurrent_date.setDate(current_date.getDate() + 1);\n\t}\n\n\tprops.data.forEach((date) => {\n\t\tconst count = count_map.get(formatDate(date));\n\t\tif (count !== undefined) {\n\t\t\tcount_map.set(formatDate(date), count + 1);\n\t\t}\n\t});\n\n\tconst table_data = Array.from(count_map)\n\t\t.map(([ date, count ]) => ({ count, date }))\n\t\t.sort((a, b) => a.date.localeCompare(b.date));\n\n\tconst block_width = 10;\n\tconst width = block_width * WEEKS;\n\tconst height = block_width * WEEKDAY;\n\treturn (\n\t\t<div>\n\t\t\t<svg viewBox={`0 0 ${width} ${height}`}>\n\t\t\t\t{table_data.map(({ date, count }, i) => {\n\t\t\t\t\tconst color = COLORS[Math.min(count, COLORS.length - 1)];\n\t\t\t\t\tconst week = Math.floor(i / WEEKDAY);\n\t\t\t\t\tconst day = i % WEEKDAY;\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<rect\n\t\t\t\t\t\t\tkey={date}\n\t\t\t\t\t\t\tid={`rect-${date}`}\n\t\t\t\t\t\t\tx={week * block_width}\n\t\t\t\t\t\t\ty={day * block_width}\n\t\t\t\t\t\t\twidth={block_width}\n\t\t\t\t\t\t\theight={block_width}\n\t\t\t\t\t\t\tfill={color}\n\t\t\t\t\t\t/>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</svg>\n\n\t\t\t{table_data.map(({ date, count }) => (\n\t\t\t\t<UncontrolledTooltip delay={{ show: 0, hide: 0 }} key={date} placement=\"right\" target={`rect-${date}`}>\n\t\t\t\t\t{props.formatTooltip ? props.formatTooltip(date, count) : `${date}: ${count}`}\n\t\t\t\t</UncontrolledTooltip>\n\t\t\t))}\n\t\t</div>\n\t);\n};\n\nexport default CalendarHeatmap;\n","import React from 'react';\nimport { Row, Table } from 'reactstrap';\nimport { BootstrapTable, TableHeaderColumn } from 'react-bootstrap-table';\nimport { isAccepted } from '../utils';\n\nimport * as Api from '../utils/Api';\nimport * as Url from '../utils/Url';\nimport Contest from '../interfaces/Contest';\nimport Problem from '../interfaces/Problem';\n\nenum Status {\n\tNothing = 0,\n\tTrying = 1,\n\tRivalSolved = 2,\n\tSolved = 3\n}\n\nconst get_table_class = (status: Status) => {\n\tswitch (status) {\n\t\tcase Status.Nothing:\n\t\t\treturn '';\n\t\tcase Status.Solved:\n\t\t\treturn 'table-success';\n\t\tcase Status.Trying:\n\t\t\treturn 'table-warning';\n\t\tcase Status.RivalSolved:\n\t\t\treturn 'table-danger';\n\t}\n};\n\ninterface ProblemWithStatus extends Problem {\n\tstatus: Status;\n\tcontest: Contest;\n}\n\ninterface Props {\n\tuser_ids: string[];\n}\n\ninterface State {\n\tcontests: Contest[];\n\tproblems: ProblemWithStatus[];\n}\n\nclass TablePage extends React.Component<Props, State> {\n\tconstructor(props: Props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tcontests: [],\n\t\t\tproblems: []\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\tPromise.all([ Api.fetchProblems(), Api.fetchContests() ]).then(([ initialProblems, contests ]) => {\n\t\t\tconst contest_map = new Map(contests.map((c) => [ c.id, c ] as [string, Contest]));\n\t\t\tconst problems = initialProblems.map((p) => {\n\t\t\t\tconst contest = contest_map.get(p.contest_id);\n\t\t\t\tif (!contest) {\n\t\t\t\t\tthrow `${p.contest_id} does not exist!`;\n\t\t\t\t}\n\t\t\t\tconst status = Status.Nothing;\n\t\t\t\treturn { status, contest, ...p };\n\t\t\t});\n\n\t\t\tthis.setState({ problems, contests }, () => {\n\t\t\t\tthis.updateState(this.props.user_ids);\n\t\t\t});\n\t\t});\n\t}\n\n\tcomponentDidUpdate(prevProps: Props) {\n\t\tif (this.props !== prevProps) {\n\t\t\tthis.updateState(this.props.user_ids);\n\t\t}\n\t}\n\n\tupdateState(user_ids: string[]) {\n\t\tconst user = user_ids.length > 0 ? user_ids[0] : '';\n\t\tconst rivals = user_ids.slice(1);\n\t\tPromise.all(user_ids.map((user_id) => Api.fetchSubmissions(user_id)))\n\t\t\t.then((r) => r.flat())\n\t\t\t.then((submissions) =>\n\t\t\t\tsubmissions\n\t\t\t\t\t.filter((s) => s.user_id === user || (rivals.includes(s.user_id) && isAccepted(s.result)))\n\t\t\t\t\t.map(({ problem_id, user_id, result }) => {\n\t\t\t\t\t\tif (user_id === user) {\n\t\t\t\t\t\t\tif (isAccepted(result)) {\n\t\t\t\t\t\t\t\treturn { problem_id, status: Status.Solved };\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn { problem_id, status: Status.Trying };\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn { problem_id, status: Status.RivalSolved };\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.sort((a, b) => a.status - b.status)\n\t\t\t\t\t.reduce((map, s) => map.set(s.problem_id, s.status), new Map<string, Status>())\n\t\t\t)\n\t\t\t.then((map) => {\n\t\t\t\tconst problems = this.state.problems.map((p) => {\n\t\t\t\t\tconst status = map.get(p.id);\n\t\t\t\t\tconst problem = Object.assign({}, p);\n\t\t\t\t\tproblem.status = Status.Nothing;\n\t\t\t\t\tif (status !== undefined) {\n\t\t\t\t\t\tproblem.status = status;\n\t\t\t\t\t}\n\t\t\t\t\treturn problem;\n\t\t\t\t});\n\t\t\t\tthis.setState({ problems });\n\t\t\t});\n\t}\n\n\trender() {\n\t\tconst [ abc, arc ] = createAtCoderBeginnerRegularContestTable(this.state.contests, this.state.problems);\n\t\tconst agc = createAtCoderGrandContestTable(this.state.contests, this.state.problems);\n\t\tabc.forEach((row) => {\n\t\t\trow.problems = row.problems.slice(0, 4);\n\t\t});\n\t\tarc.forEach((row) => {\n\t\t\tconst length = row.problems.length;\n\t\t\trow.problems = row.problems.slice(length - 4, length);\n\t\t});\n\n\t\tconst other_contest_map = this.state.problems\n\t\t\t.filter((p) => !p.contest.id.match(/^a[rgb]c\\d{3}$/))\n\t\t\t.reduce((map, problem) => {\n\t\t\t\tconst list = map.get(problem.contest.id);\n\t\t\t\tif (list) {\n\t\t\t\t\tlist.push(problem);\n\t\t\t\t} else {\n\t\t\t\t\tmap.set(problem.contest.id, [ problem ]);\n\t\t\t\t}\n\t\t\t\treturn map;\n\t\t\t}, new Map<string, ProblemWithStatus[]>());\n\n\t\tconst other_contests = Array.from(other_contest_map)\n\t\t\t.map(([ _, problems ]) => ({ contest: problems[0].contest, problems }))\n\t\t\t.sort((a, b) => b.contest.start_epoch_second - a.contest.start_epoch_second);\n\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Row>\n\t\t\t\t\t<h2>AtCoder Grand Contest</h2>\n\t\t\t\t\t<BootstrapTable data={agc} keyField=\"contest_id\">\n\t\t\t\t\t\t<TableHeaderColumn\n\t\t\t\t\t\t\tdataField=\"contest_id\"\n\t\t\t\t\t\t\tdataFormat={(contest_id: string) => (\n\t\t\t\t\t\t\t\t<a href={Url.formatContestUrl(contest_id)} target=\"_blank\">\n\t\t\t\t\t\t\t\t\t{contest_id.toUpperCase()}\n\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tContest\n\t\t\t\t\t\t</TableHeaderColumn>\n\t\t\t\t\t\t{'ABCDEF'.split('').map((c, i) => (\n\t\t\t\t\t\t\t<TableHeaderColumn\n\t\t\t\t\t\t\t\tdataField={c}\n\t\t\t\t\t\t\t\tkey={c}\n\t\t\t\t\t\t\t\tcolumnClassName={(_: any, { problems }: { problems: ProblemWithStatus[] }) => {\n\t\t\t\t\t\t\t\t\tconst problem = problems[i];\n\t\t\t\t\t\t\t\t\tif (problem) {\n\t\t\t\t\t\t\t\t\t\treturn get_table_class(problems[i].status);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\treturn '';\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tdataFormat={(_: any, row: { contest_id: string; problems: ProblemWithStatus[] }) => {\n\t\t\t\t\t\t\t\t\tconst problem = row.problems[i];\n\t\t\t\t\t\t\t\t\tif (problem) {\n\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t<a\n\t\t\t\t\t\t\t\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\t\t\t\t\t\t\t\thref={Url.formatProblemUrl(problem.id, problem.contest_id)}\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t{problem.title}\n\t\t\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\treturn '-';\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{c}\n\t\t\t\t\t\t\t</TableHeaderColumn>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</BootstrapTable>\n\t\t\t\t</Row>\n\t\t\t\t<AtCoderRegularTable contests={abc} title=\"AtCoder Beginner Contest\" />\n\t\t\t\t<AtCoderRegularTable contests={arc} title=\"AtCoder Regular Contest\" />\n\t\t\t\t<Row className=\"my-4\">\n\t\t\t\t\t<h2>Other Contests</h2>\n\t\t\t\t</Row>\n\t\t\t\t<ContestTable contests={other_contests} />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nconst ContestTable = ({ contests }: { contests: { contest: Contest; problems: ProblemWithStatus[] }[] }) => (\n\t<div>\n\t\t{contests.map(({ contest, problems }) => (\n\t\t\t<div key={contest.id}>\n\t\t\t\t<h5>\n\t\t\t\t\t<strong>\n\t\t\t\t\t\t<a target=\"_blank\" href={Url.formatContestUrl(contest.id)}>\n\t\t\t\t\t\t\t{contest.title}\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</strong>\n\t\t\t\t</h5>\n\t\t\t\t<Table striped bordered hover responsive>\n\t\t\t\t\t<tbody>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t{problems.sort((a, b) => a.title.localeCompare(b.title)).map((p) => (\n\t\t\t\t\t\t\t\t<td key={p.id} className={get_table_class(p.status)}>\n\t\t\t\t\t\t\t\t\t<a target=\"_blank\" href={Url.formatProblemUrl(p.id, p.contest_id)}>\n\t\t\t\t\t\t\t\t\t\t{p.title}\n\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t</tbody>\n\t\t\t\t</Table>\n\t\t\t</div>\n\t\t))}\n\t</div>\n);\n\nconst AtCoderRegularTable = ({\n\tcontests,\n\ttitle\n}: {\n\tcontests: { contest_id: string; problems: ProblemWithStatus[] }[];\n\ttitle: string;\n}) => (\n\t<Row className=\"my-4\">\n\t\t<h2>{title}</h2>\n\t\t<BootstrapTable data={contests}>\n\t\t\t<TableHeaderColumn\n\t\t\t\tisKey\n\t\t\t\tdataField=\"contest_id\"\n\t\t\t\tdataFormat={(_: any, row: { contest_id: string; problems: ProblemWithStatus[] }) => (\n\t\t\t\t\t<a href={Url.formatContestUrl(row.contest_id)} target=\"_blank\">\n\t\t\t\t\t\t{row.contest_id.toUpperCase()}\n\t\t\t\t\t</a>\n\t\t\t\t)}\n\t\t\t>\n\t\t\t\tContest\n\t\t\t</TableHeaderColumn>\n\t\t\t{'ABCD'.split('').map((c, i) => (\n\t\t\t\t<TableHeaderColumn\n\t\t\t\t\tdataField={c}\n\t\t\t\t\tkey={c}\n\t\t\t\t\tcolumnClassName={(_: any, { problems }: { problems: ProblemWithStatus[] }) =>\n\t\t\t\t\t\tget_table_class(problems[i].status)}\n\t\t\t\t\tdataFormat={(_: any, { problems }: { contest_id: string; problems: ProblemWithStatus[] }) => (\n\t\t\t\t\t\t<a href={Url.formatProblemUrl(problems[i].id, problems[i].contest_id)} target=\"_blank\">\n\t\t\t\t\t\t\t{problems[i].title}\n\t\t\t\t\t\t</a>\n\t\t\t\t\t)}\n\t\t\t\t>\n\t\t\t\t\t{c}\n\t\t\t\t</TableHeaderColumn>\n\t\t\t))}\n\t\t</BootstrapTable>\n\t</Row>\n);\n\nconst createAtCoderGrandContestTable = (contests: Contest[], problems: ProblemWithStatus[]) => {\n\tconst map = new Map(\n\t\tcontests.filter((c) => c.id.match(/^agc\\d{3}$/)).map((c) => [ c.id, [] ] as [string, ProblemWithStatus[]])\n\t);\n\tproblems.filter((p) => p.id.match(/^agc\\d{3}_\\w$/)).forEach((p) => {\n\t\tconst contest_id = p.id.slice(0, 6);\n\t\tconst list = map.get(contest_id);\n\t\tif (!list) {\n\t\t\tthrow `${contest_id} does not exist!`;\n\t\t}\n\t\tlist.push(p);\n\t});\n\n\treturn Array.from(map)\n\t\t.map(([ contest_id, problems ]) => ({\n\t\t\tcontest_id,\n\t\t\tproblems: problems.sort((a, b) => a.id.localeCompare(b.id))\n\t\t}))\n\t\t.sort((a, b) => b.contest_id.localeCompare(a.contest_id));\n};\n\nconst filter = (regexp: RegExp, contests: Contest[]) =>\n\tnew Map(\n\t\tcontests\n\t\t\t.filter((c) => c.id.match(regexp))\n\t\t\t.map(\n\t\t\t\t(c) =>\n\t\t\t\t\t[ c.start_epoch_second, { contest: c, problems: [] } ] as [\n\t\t\t\t\t\tnumber,\n\t\t\t\t\t\t{ contest: Contest; problems: ProblemWithStatus[] }\n\t\t\t\t\t]\n\t\t\t)\n\t);\n\nconst pushToMap = (\n\tmap: Map<number, { contest: Contest; problems: ProblemWithStatus[] }>,\n\tproblems: ProblemWithStatus[]\n) => {\n\tproblems.forEach((p) => {\n\t\tconst entry = map.get(p.contest.start_epoch_second);\n\t\tif (entry) {\n\t\t\tentry.problems.push(p);\n\t\t}\n\t});\n};\n\nconst sortMap = (map: Map<number, { contest: Contest; problems: ProblemWithStatus[] }>) =>\n\tArray.from(map.values())\n\t\t.sort(({ contest: a }, { contest: b }) => b.start_epoch_second - a.start_epoch_second)\n\t\t.map(({ contest, problems }) => {\n\t\t\tproblems.sort((a, b) => a.id.localeCompare(b.id));\n\t\t\treturn { contest_id: contest.id, problems };\n\t\t});\n\nconst createAtCoderBeginnerRegularContestTable = (contests: Contest[], problems: ProblemWithStatus[]) => {\n\tconst abc_map = filter(/^abc\\d{3}$/, contests);\n\tconst arc_map = filter(/^arc\\d{3}$/, contests);\n\n\tpushToMap(abc_map, problems);\n\tpushToMap(arc_map, problems);\n\n\tconst abc = sortMap(abc_map);\n\tconst arc = sortMap(arc_map);\n\n\treturn [ abc, arc ];\n};\n\nexport default TablePage;\n","import React from \"react\";\nimport { BootstrapTable, TableHeaderColumn } from \"react-bootstrap-table\";\n\nimport Submission from \"../../interfaces/Submission\";\nimport { formatDate } from \"../../utils/DateFormat\";\nimport * as Url from \"../../utils/Url\";\nimport { isAccepted } from \"../../utils\";\nimport { Badge } from \"reactstrap\";\nimport { string } from \"prop-types\";\n\nconst SubmissionList = ({\n  submissions,\n  problems\n}: {\n  submissions: Submission[];\n  problems: { id: string; title: string }[];\n}) => {\n  const title_map = problems.reduce(\n    (map, p) => map.set(p.id, p.title),\n    new Map<string, string>()\n  );\n  return (\n    <BootstrapTable\n      data={submissions.sort((a, b) => b.epoch_second - a.epoch_second)}\n      keyField=\"id\"\n      height=\"auto\"\n      hover\n      striped\n      pagination\n      options={{\n        paginationPosition: \"top\",\n        sizePerPage: 20,\n        sizePerPageList: [\n          {\n            text: \"20\",\n            value: 20\n          },\n          {\n            text: \"50\",\n            value: 50\n          },\n          {\n            text: \"100\",\n            value: 100\n          },\n          {\n            text: \"200\",\n            value: 200\n          },\n          {\n            text: \"All\",\n            value: submissions.length\n          }\n        ]\n      }}\n    >\n      <TableHeaderColumn\n        dataSort\n        dataField=\"epoch_second\"\n        dataFormat={(second: number) => formatDate(second)}\n      >\n        Date\n      </TableHeaderColumn>\n      <TableHeaderColumn\n        dataSort\n        dataField=\"problem_id\"\n        dataFormat={(_: string, { problem_id, contest_id }: Submission) => (\n          <a\n            target=\"_blank\"\n            href={Url.formatProblemUrl(problem_id, contest_id)}\n          >\n            {title_map.get(problem_id)}\n          </a>\n        )}\n      >\n        Problem\n      </TableHeaderColumn>\n      <TableHeaderColumn\n        dataSort\n        dataField=\"result\"\n        dataAlign=\"center\"\n        dataFormat={result =>\n          isAccepted(result) ? (\n            <Badge color=\"success\">{result}</Badge>\n          ) : (\n            <Badge color=\"warning\">{result}</Badge>\n          )\n        }\n      >\n        Status\n      </TableHeaderColumn>\n      <TableHeaderColumn dataSort dataField=\"language\">\n        Language\n      </TableHeaderColumn>\n      <TableHeaderColumn\n        dataSort\n        dataField=\"id\"\n        dataFormat={(_: number, { id, contest_id }: Submission) => (\n          <a target=\"_blank\" href={Url.formatSubmissionUrl(id, contest_id)}>\n            Detail\n          </a>\n        )}\n      >\n        Detail\n      </TableHeaderColumn>\n    </BootstrapTable>\n  );\n};\n\nexport default SubmissionList;\n","import React from 'react';\nimport { Row, Col } from 'reactstrap';\nimport {\n\tBarChart,\n\tBar,\n\tCell,\n\tXAxis,\n\tYAxis,\n\tCartesianGrid,\n\tTooltip,\n\tLegend,\n\tLineChart,\n\tLine,\n\tResponsiveContainer\n} from 'recharts';\n\nimport * as Api from '../../utils/Api';\nimport Submission from '../../interfaces/Submission';\nimport UserInfo from '../../interfaces/UserInfo';\nimport MergedProblem from '../../interfaces/MergedProblem';\nimport { ordinalSuffixOf, isAccepted } from '../../utils';\nimport { formatDate } from '../../utils/DateFormat';\n\nimport ClimingLineChart from './ClimingLineChart';\nimport DailyEffortBarChart from './DailyEffortBarChart';\nimport SmallPieChart from './SmallPieChart';\nimport FilteringHeatmap from './FilteringHeatmap';\nimport SubmissionList from './SubmissionList';\n\ninterface Props {\n\tuser_ids: string[];\n}\n\ninterface RankingEntry {\n\tproblem_count: number;\n\tuser_id: string;\n}\n\ninterface State {\n\tfirst_ranking: RankingEntry[];\n\tfast_ranking: RankingEntry[];\n\tshort_ranking: RankingEntry[];\n\n\tproblems: MergedProblem[];\n\tsubmissions: Submission[];\n\tuser_info: UserInfo;\n\n\tcurrent_streak: number;\n\tlongest_streak: number;\n\tlast_ac: string;\n\n\tdaily_data: { date: number; count: number }[];\n}\n\nclass UserPage extends React.Component<Props, State> {\n\tconstructor(props: Props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tfirst_ranking: [],\n\t\t\tfast_ranking: [],\n\t\t\tshort_ranking: [],\n\n\t\t\tproblems: [],\n\t\t\tsubmissions: [],\n\t\t\tuser_info: {\n\t\t\t\taccepted_count: 1e9 + 7,\n\t\t\t\taccepted_count_rank: 1e9 + 7,\n\t\t\t\trated_point_sum: 1e9 + 7,\n\t\t\t\trated_point_sum_rank: 1e9 + 7,\n\t\t\t\tuser_id: ''\n\t\t\t},\n\n\t\t\tcurrent_streak: 1e9 + 7,\n\t\t\tlongest_streak: 1e9 + 7,\n\t\t\tlast_ac: '',\n\n\t\t\tdaily_data: []\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\tApi.fetchFirstRanking()\n\t\t\t.then((ranking) => ranking.sort((a, b) => b.problem_count - a.problem_count))\n\t\t\t.then((first_ranking) => this.setState({ first_ranking }));\n\t\tApi.fetchShortRanking()\n\t\t\t.then((ranking) => ranking.sort((a, b) => b.problem_count - a.problem_count))\n\t\t\t.then((short_ranking) => this.setState({ short_ranking }));\n\t\tApi.fetchFastRanking()\n\t\t\t.then((ranking) => ranking.sort((a, b) => b.problem_count - a.problem_count))\n\t\t\t.then((fast_ranking) => this.setState({ fast_ranking }));\n\t\tApi.fetchMergedProblems().then((problems) => this.setState({ problems }));\n\t\tthis.updateState(this.getUserIdFromProps());\n\t}\n\tcomponentDidUpdate(prevProps: Props) {\n\t\tif (this.props !== prevProps) {\n\t\t\tthis.updateState(this.getUserIdFromProps());\n\t\t}\n\t}\n\n\tupdateState(user_id: string) {\n\t\tApi.fetchSubmissions(user_id).then((submissions) => {\n\t\t\tconst first_ac_map = submissions\n\t\t\t\t.filter((s) => isAccepted(s.result))\n\t\t\t\t.sort((a, b) => b.epoch_second - a.epoch_second)\n\t\t\t\t.reduce((map, s) => map.set(s.problem_id, s.epoch_second), new Map<string, number>());\n\t\t\tconst { longest_streak, current_streak, last_ac } = get_streak(first_ac_map);\n\t\t\tconst date_count_map = Array.from(first_ac_map).reduce((map, [ problem_id, second ]) => {\n\t\t\t\tconst date = formatDate(second);\n\t\t\t\tconst count = map.get(date);\n\t\t\t\tif (count) {\n\t\t\t\t\treturn map.set(date, count + 1);\n\t\t\t\t} else {\n\t\t\t\t\treturn map.set(date, 1);\n\t\t\t\t}\n\t\t\t}, new Map<string, number>());\n\t\t\tconst daily_data = Array.from(date_count_map)\n\t\t\t\t.map(([ date, count ]) => ({ date: new Date(date).getTime(), count }))\n\t\t\t\t.sort((a, b) => a.date - b.date);\n\t\t\tthis.setState({\n\t\t\t\tsubmissions,\n\t\t\t\tlongest_streak,\n\t\t\t\tcurrent_streak,\n\t\t\t\tlast_ac,\n\t\t\t\tdaily_data\n\t\t\t});\n\t\t});\n\t\tApi.fetchUserInfo(user_id).then((user_info) => this.setState({ user_info }));\n\t}\n\n\tgetUserIdFromProps() {\n\t\treturn this.props.user_ids.length > 0 ? this.props.user_ids[0] : '';\n\t}\n\n\trender() {\n\t\tconst user_id = this.getUserIdFromProps();\n\t\tif (user_id.length == 0) {\n\t\t\treturn <div />;\n\t\t}\n\n\t\tconst { submissions, user_info, longest_streak, current_streak, last_ac, problems } = this.state;\n\n\t\tconst shortest_rank = get_rank(user_id, this.state.short_ranking);\n\t\tconst fastest_rank = get_rank(user_id, this.state.fast_ranking);\n\t\tconst first_rank = get_rank(user_id, this.state.first_ranking);\n\n\t\tconst climing_data = this.state.daily_data.map((d) => Object.assign({}, d));\n\t\tcliming_data.forEach((_, i) => {\n\t\t\tif (i > 0) {\n\t\t\t\tcliming_data[i].count += climing_data[i - 1].count;\n\t\t\t}\n\t\t});\n\n\t\tconst ac_submissions = submissions.filter((s) => s.user_id === user_id && isAccepted(s.result));\n\n\t\tconst agc_solved = count_solved(/^agc\\d{3}_/, problems, ac_submissions);\n\t\tconst abc_solved = count_solved(/^abc\\d{3}_/, problems, ac_submissions);\n\t\tconst arc_solved = count_solved(/^arc\\d{3}_/, problems, ac_submissions);\n\n\t\tconst achievements = [\n\t\t\t{\n\t\t\t\tkey: 'Accepted',\n\t\t\t\tvalue: user_info.accepted_count,\n\t\t\t\trank: user_info.accepted_count_rank\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: 'Shortest Code',\n\t\t\t\tvalue: shortest_rank.count,\n\t\t\t\trank: shortest_rank.rank\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: 'Fastest Code',\n\t\t\t\tvalue: fastest_rank.count,\n\t\t\t\trank: fastest_rank.rank\n\t\t\t},\n\t\t\t{ key: 'First AC', value: first_rank.count, rank: first_rank.rank }\n\t\t];\n\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Row className=\"my-2 border-bottom\">\n\t\t\t\t\t<h1>{user_id}</h1>\n\t\t\t\t</Row>\n\t\t\t\t<Row className=\"my-3\">\n\t\t\t\t\t{achievements.map(({ key, value, rank }) => (\n\t\t\t\t\t\t<Col key={key} className=\"text-center\">\n\t\t\t\t\t\t\t<h6>{key}</h6>\n\t\t\t\t\t\t\t<h3>{value}</h3>\n\t\t\t\t\t\t\t<h6 className=\"text-muted\">{`${rank + 1}${ordinalSuffixOf(rank + 1)}`}</h6>\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t))}\n\t\t\t\t</Row>\n\t\t\t\t<Row className=\"my-3\">\n\t\t\t\t\t<Col key=\"Rated Point Sum\" className=\"text-center\">\n\t\t\t\t\t\t<h6>Rated Point Sum</h6>\n\t\t\t\t\t\t<h3>{this.state.user_info.rated_point_sum} pt</h3>\n\t\t\t\t\t\t<h6 className=\"text-muted\">{`${this.state.user_info.rated_point_sum_rank + 1}${ordinalSuffixOf(\n\t\t\t\t\t\t\tthis.state.user_info.rated_point_sum + 1\n\t\t\t\t\t\t)}`}</h6>\n\t\t\t\t\t</Col>\n\t\t\t\t\t<Col key=\"Longest Streak\" className=\"text-center\">\n\t\t\t\t\t\t<h6>Longest Streak</h6>\n\t\t\t\t\t\t<h3>{longest_streak} days</h3>\n\t\t\t\t\t</Col>\n\t\t\t\t\t<Col key=\"Current Streak\" className=\"text-center\">\n\t\t\t\t\t\t<h6>Current Streak</h6>\n\t\t\t\t\t\t<h3>{current_streak} days</h3>\n\t\t\t\t\t\t<h6 className=\"text-muted\">{`Last AC: ${last_ac}`}</h6>\n\t\t\t\t\t</Col>\n\t\t\t\t\t<Col />\n\t\t\t\t</Row>\n\n\t\t\t\t<Row className=\"my-2 border-bottom\">\n\t\t\t\t\t<h1>AtCoder Beginner Contest</h1>\n\t\t\t\t</Row>\n\t\t\t\t<Row className=\"my-3\">\n\t\t\t\t\t{abc_solved.map(({ solved, total }, i) => {\n\t\t\t\t\t\tconst key = 'ABCDEF'.split('')[i];\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<Col key={key} className=\"text-center\" xs=\"3\">\n\t\t\t\t\t\t\t\t<SmallPieChart accepted={solved} trying={total - solved} title={`Problem ${key}`} />\n\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</Row>\n\n\t\t\t\t<Row className=\"my-2 border-bottom\">\n\t\t\t\t\t<h1>AtCoder Regular Contest</h1>\n\t\t\t\t</Row>\n\t\t\t\t<Row className=\"my-3\">\n\t\t\t\t\t{arc_solved.map(({ solved, total }, i) => {\n\t\t\t\t\t\tconst key = 'ABCDEF'.split('')[i];\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<Col key={key} className=\"text-center\" xs=\"3\">\n\t\t\t\t\t\t\t\t<SmallPieChart accepted={solved} trying={total - solved} title={`Problem ${key}`} />\n\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</Row>\n\n\t\t\t\t<Row className=\"my-2 border-bottom\">\n\t\t\t\t\t<h1>AtCoder Grand Contest</h1>\n\t\t\t\t</Row>\n\t\t\t\t<Row className=\"my-3\">\n\t\t\t\t\t{agc_solved.map(({ solved, total }, i) => {\n\t\t\t\t\t\tconst key = 'ABCDEF'.split('')[i];\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<Col key={key} className=\"text-center\" xs=\"2\">\n\t\t\t\t\t\t\t\t<SmallPieChart accepted={solved} trying={total - solved} title={`Problem ${key}`} />\n\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</Row>\n\n\t\t\t\t<Row className=\"my-2 border-bottom\">\n\t\t\t\t\t<h1>Daily Effort</h1>\n\t\t\t\t</Row>\n\t\t\t\t<DailyEffortBarChart daily_data={this.state.daily_data} />\n\n\t\t\t\t<Row className=\"my-2 border-bottom\">\n\t\t\t\t\t<h1>Climing</h1>\n\t\t\t\t</Row>\n\t\t\t\t<ClimingLineChart climing_data={climing_data} />\n\n\t\t\t\t<Row className=\"my-2 border-bottom\">\n\t\t\t\t\t<h1>Heatmap</h1>\n\t\t\t\t</Row>\n\t\t\t\t<FilteringHeatmap submissions={submissions.filter((s) => s.user_id === user_id)} />\n\n\t\t\t\t<Row className=\"my-2 border-bottom\">\n\t\t\t\t\t<h1>Submissions</h1>\n\t\t\t\t</Row>\n\t\t\t\t<SubmissionList problems={problems} submissions={submissions.filter((s) => s.user_id === user_id)} />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nconst get_streak = (first_ac_map: Map<string, number>) => {\n\tlet longest_streak = 1;\n\tlet current_streak = 1;\n\tconst seconds = Array.from(first_ac_map).map(([ problem_id, epoch_second ]) => epoch_second).sort();\n\tfor (let index = 1; index < seconds.length; index++) {\n\t\tconst second1 = seconds[index - 1];\n\t\tconst second2 = seconds[index];\n\t\tif (formatDate(second2) === formatDate(second1)) {\n\t\t\tcontinue;\n\t\t}\n\t\tif (formatDate(second2) === formatDate(second1 + 24 * 3600)) {\n\t\t\tcurrent_streak += 1;\n\t\t} else {\n\t\t\tlongest_streak = Math.max(longest_streak, current_streak);\n\t\t\tcurrent_streak = 1;\n\t\t}\n\t}\n\tlongest_streak = Math.max(longest_streak, current_streak);\n\tconst today = new Date().getTime() / 1000;\n\tconst last_ac_second = seconds[seconds.length - 1];\n\n\tif (\n\t\tformatDate(today) !== formatDate(last_ac_second) &&\n\t\tformatDate(today) !== formatDate(last_ac_second + 24 * 3600)\n\t) {\n\t\tcurrent_streak = 0;\n\t}\n\treturn {\n\t\tlongest_streak,\n\t\tcurrent_streak,\n\t\tlast_ac: formatDate(last_ac_second)\n\t};\n};\n\nconst get_rank = (user_id: string, ranking: RankingEntry[]) => {\n\tconst rank = ranking.filter((rank) => rank.user_id == user_id)[0];\n\tif (!rank) {\n\t\treturn { count: 0, rank: ranking.length };\n\t}\n\tconst { problem_count } = rank;\n\tconst index = ranking\n\t\t.map(({ problem_count }, i) => {\n\t\t\treturn { count: problem_count, i };\n\t\t})\n\t\t.filter(({ count }) => count == problem_count)\n\t\t.reduce((min, { i }) => Math.min(i, min), ranking.length);\n\treturn { count: ranking[index].problem_count, rank: index };\n};\n\nconst count_solved = (prefix: RegExp, problems: MergedProblem[], ac_submissions: Submission[]) => {\n\tconst regexps = [ /_[a1]/, /_[b2]/, /_[c3]/, /_[d4]/, /_[e5]/, /_[f6]/ ];\n\tconst count = (ids: string[]) => {\n\t\tconst c = [ 0, 0, 0, 0, 0, 0 ];\n\t\tids.filter((id) => id.match(prefix)).forEach((id) => {\n\t\t\tregexps.forEach((e, i) => {\n\t\t\t\tif (id.match(e)) {\n\t\t\t\t\tc[i] += 1;\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t\treturn c;\n\t};\n\n\tconst total_count = count(problems.map((p) => p.id));\n\tconst solved_count = count(Array.from(ac_submissions.reduce((set, s) => set.add(s.problem_id), new Set<string>())));\n\n\treturn total_count\n\t\t.map((total, i) => ({\n\t\t\ttotal: total,\n\t\t\tsolved: solved_count[i]\n\t\t}))\n\t\t.filter(({ total }) => total > 0);\n};\n\nexport default UserPage;\n","import React from 'react';\nimport { NavLink as RouterLink } from 'react-router-dom';\nimport { withRouter, RouteComponentProps } from 'react-router';\nimport {\n\tNavLink,\n\tNavbar,\n\tNavbarBrand,\n\tNavbarToggler,\n\tCollapse,\n\tNav,\n\tNavItem,\n\tUncontrolledDropdown,\n\tDropdownToggle,\n\tDropdownMenu,\n\tDropdownItem,\n\tForm,\n\tInput,\n\tButton,\n\tFormGroup,\n\tLabel\n} from 'reactstrap';\n\nenum PageKind {\n\tTABLE = 'table',\n\tLIST = 'list',\n\tUSER = 'user'\n}\n\ninterface State {\n\tuser_id: string;\n\trival_id: string;\n\tkind: PageKind;\n}\n\ninterface Props extends RouteComponentProps {}\n\nclass PrimitiveNavigationBar extends React.Component<Props, State> {\n\tconstructor(props: any) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tuser_id: '',\n\t\t\trival_id: '',\n\t\t\tkind: PageKind.TABLE\n\t\t};\n\t}\n\n\tsubmit(nextKind: PageKind) {\n\t\tthis.setState({ kind: nextKind });\n\t\tconst { user_id, rival_id } = this.state;\n\n\t\tconst users: string[] = [];\n\t\tif (user_id.match(/^[a-zA-Z0-9]*$/)) {\n\t\t\tusers.push(user_id);\n\t\t}\n\t\tif (rival_id.match(/^[a-zA-Z0-9,]+$/)) {\n\t\t\trival_id.split(',').filter((user) => user.length > 0).forEach((user) => users.push(user));\n\t\t}\n\n\t\tconst current_pathname = this.props.history.location.pathname;\n\n\t\tconst next_pathname = '/' + nextKind + '/' + users.join('/');\n\t\tif (current_pathname !== next_pathname) {\n\t\t\tthis.props.history.push(next_pathname);\n\t\t}\n\t}\n\n\tcomponentWillMount() {\n\t\tlet kind = PageKind.TABLE;\n\t\tconst { pathname } = this.props.history.location;\n\t\tif (pathname.match(/^\\/user/)) {\n\t\t\tkind = PageKind.USER;\n\t\t} else if (pathname.match(/^\\/list/)) {\n\t\t\tkind = PageKind.LIST;\n\t\t}\n\n\t\tconst params = pathname.split('/');\n\t\tconst user_id = params.length >= 3 ? params[2] : '';\n\t\tconst rival_id = params.slice(3).filter((x) => x.length > 0).join(',');\n\t\tthis.setState({ kind, user_id, rival_id });\n\t}\n\n\trender() {\n\t\tlet root_url = '/';\n\t\tif (this.state.user_id.length > 0 || this.state.rival_id.length > 0) {\n\t\t\troot_url += 'table/';\n\t\t}\n\t\tif (this.state.user_id.length > 0) {\n\t\t\troot_url += this.state.user_id + '/';\n\t\t}\n\t\tif (this.state.rival_id.length > 0) {\n\t\t\troot_url += this.state.rival_id.split(',').filter((s) => s.match(/^[0-9a-zA-Z_]+/)).join('/');\n\t\t}\n\t\treturn (\n\t\t\t<Navbar color=\"light\" light expand=\"md\">\n\t\t\t\t<NavbarBrand tag={RouterLink} to={root_url}>\n\t\t\t\t\tAtCoder Problems\n\t\t\t\t</NavbarBrand>\n\t\t\t\t<NavbarToggler />\n\t\t\t\t<Collapse navbar>\n\t\t\t\t\t<Nav className=\"ml-auto\" navbar>\n\t\t\t\t\t\t<Form inline>\n\t\t\t\t\t\t\t<FormGroup className=\"mb-2 mr-sm-2 mb-sm-0\">\n\t\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\t\tstyle={{ width: '150px' }}\n\t\t\t\t\t\t\t\t\tonKeyPress={(e) => {\n\t\t\t\t\t\t\t\t\t\tif (e.key == 'Enter') {\n\t\t\t\t\t\t\t\t\t\t\tthis.submit(this.state.kind);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\tvalue={this.state.user_id}\n\t\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\t\tname=\"user_id\"\n\t\t\t\t\t\t\t\t\tid=\"user_id\"\n\t\t\t\t\t\t\t\t\tplaceholder=\"User ID\"\n\t\t\t\t\t\t\t\t\tonChange={(e) => this.setState({ user_id: e.target.value })}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</FormGroup>\n\t\t\t\t\t\t\t<FormGroup className=\"mb-2 mr-sm-2 mb-sm-0\">\n\t\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\t\tstyle={{ width: '150px' }}\n\t\t\t\t\t\t\t\t\tonKeyPress={(e) => {\n\t\t\t\t\t\t\t\t\t\tif (e.key == 'Enter') {\n\t\t\t\t\t\t\t\t\t\t\tthis.submit(this.state.kind);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\tvalue={this.state.rival_id}\n\t\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\t\tname=\"rival_id\"\n\t\t\t\t\t\t\t\t\tid=\"rival_id\"\n\t\t\t\t\t\t\t\t\tplaceholder=\"Rival ID, ...\"\n\t\t\t\t\t\t\t\t\tonChange={(e) => this.setState({ rival_id: e.target.value })}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</FormGroup>\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tclassName=\"mb-2 mr-sm-2 mb-sm-0\"\n\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\tthis.submit(PageKind.TABLE);\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tTable\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tclassName=\"mb-2 mr-sm-2 mb-sm-0\"\n\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\tthis.submit(PageKind.LIST);\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tList\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tclassName=\"mb-2 mr-sm-2 mb-sm-0\"\n\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\tthis.submit(PageKind.USER);\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tUser Page\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</Form>\n\n\t\t\t\t\t\t<UncontrolledDropdown nav inNavbar>\n\t\t\t\t\t\t\t<DropdownToggle nav caret>\n\t\t\t\t\t\t\t\tRankings\n\t\t\t\t\t\t\t</DropdownToggle>\n\t\t\t\t\t\t\t<DropdownMenu right>\n\t\t\t\t\t\t\t\t<DropdownItem tag={RouterLink} to=\"/ac\">\n\t\t\t\t\t\t\t\t\tAC Count\n\t\t\t\t\t\t\t\t</DropdownItem>\n\t\t\t\t\t\t\t\t<DropdownItem tag={RouterLink} to=\"/fast\">\n\t\t\t\t\t\t\t\t\tFastest Submissions\n\t\t\t\t\t\t\t\t</DropdownItem>\n\t\t\t\t\t\t\t\t<DropdownItem tag={RouterLink} to=\"/short\">\n\t\t\t\t\t\t\t\t\tShortest Submissions\n\t\t\t\t\t\t\t\t</DropdownItem>\n\t\t\t\t\t\t\t\t<DropdownItem tag={RouterLink} to=\"/first\">\n\t\t\t\t\t\t\t\t\tFirst AC\n\t\t\t\t\t\t\t\t</DropdownItem>\n\t\t\t\t\t\t\t\t<DropdownItem tag={RouterLink} to=\"/sum\">\n\t\t\t\t\t\t\t\t\tRated Point Ranking\n\t\t\t\t\t\t\t\t</DropdownItem>\n\t\t\t\t\t\t\t\t<DropdownItem tag={RouterLink} to=\"/lang\">\n\t\t\t\t\t\t\t\t\tLanguage Owners\n\t\t\t\t\t\t\t\t</DropdownItem>\n\t\t\t\t\t\t\t</DropdownMenu>\n\t\t\t\t\t\t</UncontrolledDropdown>\n\n\t\t\t\t\t\t<UncontrolledDropdown nav inNavbar>\n\t\t\t\t\t\t\t<DropdownToggle nav caret>\n\t\t\t\t\t\t\t\tLinks\n\t\t\t\t\t\t\t</DropdownToggle>\n\t\t\t\t\t\t\t<DropdownMenu right>\n\t\t\t\t\t\t\t\t<DropdownItem tag=\"a\" href=\"https://atcoder.jp/\" target=\"_blank\">\n\t\t\t\t\t\t\t\t\tAtCoder\n\t\t\t\t\t\t\t\t</DropdownItem>\n\t\t\t\t\t\t\t\t<DropdownItem tag=\"a\" href=\"http://aoj-icpc.ichyo.jp/\" target=\"_blank\">\n\t\t\t\t\t\t\t\t\tAOJ-ICPC\n\t\t\t\t\t\t\t\t</DropdownItem>\n\t\t\t\t\t\t\t\t<DropdownItem\n\t\t\t\t\t\t\t\t\ttag=\"a\"\n\t\t\t\t\t\t\t\t\thref=\"https://github.com/kenkoooo/AtCoderProblems\"\n\t\t\t\t\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\tGitHub\n\t\t\t\t\t\t\t\t</DropdownItem>\n\t\t\t\t\t\t\t\t<DropdownItem tag=\"a\" href=\"https://twitter.com/kenkoooo\" target=\"_blank\">\n\t\t\t\t\t\t\t\t\t@kenkoooo\n\t\t\t\t\t\t\t\t</DropdownItem>\n\t\t\t\t\t\t\t</DropdownMenu>\n\t\t\t\t\t\t</UncontrolledDropdown>\n\t\t\t\t\t</Nav>\n\t\t\t\t</Collapse>\n\t\t\t</Navbar>\n\t\t);\n\t}\n}\n\nconst NavigationBar = withRouter(PrimitiveNavigationBar);\n\nexport default NavigationBar;\n","import React, { Component } from 'react';\nimport { HashRouter as Router, Route, Switch, Redirect, RouteComponentProps } from 'react-router-dom';\nimport { Container } from 'reactstrap';\n\nimport ACRanking from './pages/ACRanking';\nimport FastestRanking from './pages/FastestRanking';\nimport FirstRanking from './pages/FirstRanking';\nimport ShortRanking from './pages/ShortRanking';\nimport SumRanking from './pages/SumRanking';\nimport LanguageOwners from './pages/LanguageOwners';\nimport ListPage from './pages/ListPage';\nimport UserPage from './pages/UserPage';\nimport TablePage from './pages/TablePage';\n\nimport NavigationBar from './components/NavigationBar';\ntype MatchUserId = { match: { params: { user_id?: string } } };\nconst extractUserId = ({ match: { params: { user_id } } }: MatchUserId) => (user_id ? user_id.split('/') : []);\n\nclass App extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<Router>\n\t\t\t\t<div>\n\t\t\t\t\t<NavigationBar />\n\t\t\t\t\t<Container style={{ width: '100%', maxWidth: '90%' }}>\n\t\t\t\t\t\t<Switch>\n\t\t\t\t\t\t\t<Route exact path=\"/ac\" component={ACRanking} />\n\t\t\t\t\t\t\t<Route exact path=\"/fast\" component={FastestRanking} />\n\t\t\t\t\t\t\t<Route exact path=\"/short\" component={ShortRanking} />\n\t\t\t\t\t\t\t<Route exact path=\"/first\" component={FirstRanking} />\n\t\t\t\t\t\t\t<Route exact path=\"/sum\" component={SumRanking} />\n\t\t\t\t\t\t\t<Route exact path=\"/lang\" component={LanguageOwners} />\n\t\t\t\t\t\t\t<Route\n\t\t\t\t\t\t\t\tpath=\"/user/:user_id([a-zA-Z0-9]*)*\"\n\t\t\t\t\t\t\t\tcomponent={(props: MatchUserId) => <UserPage user_ids={extractUserId(props)} />}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<Route\n\t\t\t\t\t\t\t\tpath=\"/table/:user_id([a-zA-Z0-9]*)*\"\n\t\t\t\t\t\t\t\tcomponent={(props: MatchUserId) => <TablePage user_ids={extractUserId(props)} />}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<Route\n\t\t\t\t\t\t\t\tpath=\"/list/:user_id([a-zA-Z0-9]*)*\"\n\t\t\t\t\t\t\t\tcomponent={(props: MatchUserId) => <ListPage user_ids={extractUserId(props)} />}\n\t\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t\t<Redirect path=\"/\" to=\"/table\" />\n\t\t\t\t\t\t</Switch>\n\t\t\t\t\t</Container>\n\t\t\t\t</div>\n\t\t\t</Router>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'react-bootstrap-table/dist/react-bootstrap-table-all.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}