{"version":3,"sources":["utils/Api.tsx","components/Ranking.tsx","pages/ACRanking.tsx","pages/FastestRanking.tsx","pages/FirstRanking.tsx","pages/ShortRanking.tsx","pages/SumRanking.tsx","pages/LanguageOwners.tsx","utils/index.ts","utils/DateFormat.ts","utils/Url.tsx","pages/UserPage/FilteringHeatmap.tsx","pages/ListPage.tsx","pages/UserPage/ClimingLineChart.tsx","pages/UserPage/DailyEffortBarChart.tsx","pages/UserPage/SmallPieChart.tsx","components/CalendarHeatmap.tsx","pages/TablePage.tsx","pages/UserPage/SubmissionList.tsx","pages/UserPage/index.tsx","components/NavigationBar.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["BASE_URL","STATIC_API_BASE_URL","fetchRanking","url","fetch","then","r","json","fetchShortRanking","fetchFastRanking","fetchFirstRanking","fetchSumRanking","fetchContests","fetchMergedProblems","fetchSubmissions","user","concat","Ranking","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","_this2","users","sort","a","b","count","rank","cur","forEach","_","i","push","map","u","id","setState","react_default","createElement","Row","title","lib","height","pagination","striped","hover","options","paginationPosition","sizePerPage","sizePerPageList","text","value","length","dataField","isKey","React","Component","ACRanking","components_Ranking","rows","row","problem_count","user_id","FastestRanking","ApiUrl","FirstRanking","ShortRanking","SumRanking","point_sum","ordinalNumbers","OneOwner","className","entry","language","ranking","slice","Col","key","name","LanguageOwners","rankings","entries","Map","e","arr","get","set","Array","from","LanguageOwners_OneOwner","isAccepted","result","ordinalSuffixOf","j","k","formatDate","epoch_second","date","Date","year","getFullYear","month","getMonth","day","getDate","FilterStatus","formatContestUrl","contest","formatSubmissionUrl","formatProblemUrl","problem","ListPage","problems","Promise","all","Api","_result","slicedToArray","merged_problems","contest_map","reduce","showing_point","point","predict","contest_id","start_epoch_second","objectSpread","status","rivals","last_ac_date","updateProblems","user_ids","prevProps","prevState","_this3","flat","submissions","submission_map","submission","problem_id","s","new_status","mine","filter","some","new_rivals_set","includes","add","Set","new_rivals","new_ac_date","reverse","new_problem","assign","keyField","trClassName","dataSort","dataFormat","href","Url","target","dataAlign","Badge","color","cell","toFixed","fastest_submission_id","fastest_contest_id","fastest_user_id","execution_time","shortest_submission_id","shortest_contest_id","shortest_user_id","source_code_length","first_submission_id","first_contest_id","first_user_id","ClimingLineChart","_ref","climing_data","es6","width","margin","top","right","left","bottom","strokeDasharray","dataKey","type","domain","tickFormatter","ms","labelFormatter","v","stroke","DailyEffortBarChart","daily_data","fill","COLORS","SmallPieChart","trying","accepted","outerRadius","CalendarHeatmap","next_sunday","getDay","setDate","current_date","WEEKS","count_map","undefined","table_data","_ref2","tabled","day_of_week","week_row","week","viewBox","block_width","Math","min","x","y","UncontrolledTooltip","delay","show","hide","placement","formatTooltip","Status","FilteringHeatmap","filter_status","AllSubmissions","filtered_submissions","AllAccepted","UniqueAccepted","values","ButtonGroup","Button","onClick","active","components_CalendarHeatmap","unit","SubmissionList","title_map","p","second","_ref3","UserPage","first_ranking","fast_ranking","short_ranking","user_info","accepted_count","accepted_count_rank","rated_point_sum","rated_point_sum_rank","current_streak","longest_streak","last_ac","updateState","getUserIdFromProps","first_ac_map","_get_streak","get_streak","date_count_map","_ref4","getTime","info","_this$state","shortest_rank","get_rank","fastest_rank","first_rank","d","ac_submissions","agc_solved","count_solved","abc_solved","arc_solved","achievements","_ref5","_ref6","solved","total","split","xs","UserPage_SmallPieChart","_ref7","_ref8","UserPage_DailyEffortBarChart","UserPage_ClimingLineChart","UserPage_FilteringHeatmap","UserPage_SubmissionList","seconds","_ref9","_ref10","index","second1","second2","max","today","last_ac_second","_ref11","_ref12","_ref13","prefix","regexps","ids","c","match","total_count","solved_count","_ref14","PageKind","TablePage","contests","initialProblems","Nothing","Solved","Trying","RivalSolved","_createAtCoderBeginne","createAtCoderBeginnerRegularContestTable","_createAtCoderBeginne2","abc","arc","agc","createAtCoderGrandContestTable","other_contest_map","list","other_contests","toUpperCase","columnClassName","TablePage_AtCoderRegularTable","TablePage_ContestTable","ContestTable","Table","bordered","responsive","class_name","AtCoderRegularTable","_ref15","_ref16","abc_map","arc_map","pushToMap","sortMap","_ref17","_ref18","_ref19","_ref20","_ref21","_ref22","PrimitiveNavigationBar","rival_id","kind","TABLE","nextKind","current_pathname","history","location","pathname","next_pathname","join","USER","LIST","params","root_url","Navbar","light","expand","NavbarBrand","tag","RouterLink","to","NavbarToggler","Collapse","navbar","Nav","Form","inline","FormGroup","Input","style","onKeyPress","submit","placeholder","onChange","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","DropdownMenu","DropdownItem","NavigationBar","withRouter","extractUserId","App","HashRouter","components_NavigationBar","Container","maxWidth","Switch","Route","exact","path","component","pages_UserPage","pages_TablePage","pages_ListPage","Redirect","Boolean","window","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8963d3ec.chunk.js","sourcesContent":["import Contest from '../interfaces/Contest';\nimport Problem from '../interfaces/Problem';\nimport MergedProblem from '../interfaces/MergedProblem';\nimport UserInfo from '../interfaces/UserInfo';\nimport Submission from '../interfaces/Submission';\n\nconst BASE_URL = 'https://kenkoooo.com/atcoder';\nconst STATIC_API_BASE_URL = BASE_URL + '/resources';\nconst DYNAMIC_API_BASE_URL = BASE_URL + '/atcoder-api';\n\nconst AC_COUNT_URL = STATIC_API_BASE_URL + '/ac.json';\nconst SHORT_COUNT_URL = STATIC_API_BASE_URL + '/short.json';\nconst FAST_COUNT_URL = STATIC_API_BASE_URL + '/fast.json';\nconst FIRST_COUNT_URL = STATIC_API_BASE_URL + '/first.json';\nconst SUM_URL = STATIC_API_BASE_URL + '/sums.json';\nconst LANG_URL = STATIC_API_BASE_URL + '/lang.json';\n\ninterface RankingEntry {\n\tproblem_count: number;\n\tuser_id: string;\n}\n\nconst fetchRanking = (url: string) => fetch(url).then((r) => r.json()).then((r) => r as RankingEntry[]);\n\nexport const fetchACRanking = () => fetchRanking(AC_COUNT_URL);\nexport const fetchShortRanking = () => fetchRanking(SHORT_COUNT_URL);\nexport const fetchFastRanking = () => fetchRanking(FAST_COUNT_URL);\nexport const fetchFirstRanking = () => fetchRanking(FIRST_COUNT_URL);\nexport const fetchSumRanking = () =>\n\tfetch(SUM_URL).then((r) => r.json()).then(\n\t\t(r) =>\n\t\t\tr as {\n\t\t\t\tuser_id: string;\n\t\t\t\tpoint_sum: number;\n\t\t\t}[]\n\t);\nexport const fetchLangRanking = () =>\n\tfetch(LANG_URL).then((r) => r.json()).then(\n\t\t(r) =>\n\t\t\tr as {\n\t\t\t\tuser_id: string;\n\t\t\t\tcount: number;\n\t\t\t\tlanguage: string;\n\t\t\t}[]\n\t);\n\nexport const fetchContests = () =>\n\tfetch(STATIC_API_BASE_URL + '/contests.json').then((r) => r.json()).then((r) => r as Contest[]);\nexport const fetchProblems = () =>\n\tfetch(STATIC_API_BASE_URL + '/problems.json').then((r) => r.json()).then((r) => r as Problem[]);\nexport const fetchMergedProblems = () =>\n\tfetch(STATIC_API_BASE_URL + '/merged-problems.json').then((r) => r.json()).then((r) => r as MergedProblem[]);\nexport const fetchUserInfo = (user: string) =>\n\tfetch(`${DYNAMIC_API_BASE_URL}/v2/user_info?user=${user}`).then((r) => r.json()).then((info) => info as UserInfo);\nexport const fetchSubmissions = (user: string) =>\n\tfetch(`${DYNAMIC_API_BASE_URL}/results?user=${user}`).then((r) => r.json()).then((r) => r as Submission[]);\n","import React from 'react';\nimport { Row } from 'reactstrap';\nimport { BootstrapTable, TableHeaderColumn } from 'react-bootstrap-table';\n\ninterface Props {\n\ttitle: string;\n\tfetch: (() => Promise<{ count: number; id: string }[]>);\n}\n\ninterface User {\n\tcount: number;\n\tid: string;\n\trank: number;\n}\n\ninterface State {\n\tdata: User[];\n}\n\nclass Ranking extends React.Component<Props, State> {\n\tconstructor(props: any) {\n\t\tsuper(props);\n\t\tthis.state = { data: [] };\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.props.fetch().then((users) => {\n\t\t\tusers.sort((a, b) => b.count - a.count);\n\t\t\tconst rank: number[] = [];\n\t\t\tlet cur = 1;\n\t\t\tusers.forEach((_, i) => {\n\t\t\t\tif (i > 0 && users[i].count < users[i - 1].count) {\n\t\t\t\t\tcur = i + 1;\n\t\t\t\t}\n\t\t\t\trank.push(cur);\n\t\t\t});\n\t\t\tconst data = users.map((u, i) => ({\n\t\t\t\tcount: u.count,\n\t\t\t\tid: u.id,\n\t\t\t\trank: rank[i]\n\t\t\t}));\n\t\t\tthis.setState({ data });\n\t\t});\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<Row>\n\t\t\t\t<h2>{this.props.title}</h2>\n\t\t\t\t<BootstrapTable\n\t\t\t\t\theight=\"auto\"\n\t\t\t\t\tdata={this.state.data}\n\t\t\t\t\tpagination\n\t\t\t\t\tstriped\n\t\t\t\t\thover\n\t\t\t\t\toptions={{\n\t\t\t\t\t\tpaginationPosition: 'top',\n\t\t\t\t\t\tsizePerPage: 20,\n\t\t\t\t\t\tsizePerPageList: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttext: '20',\n\t\t\t\t\t\t\t\tvalue: 20\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttext: '50',\n\t\t\t\t\t\t\t\tvalue: 50\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttext: '100',\n\t\t\t\t\t\t\t\tvalue: 100\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttext: '200',\n\t\t\t\t\t\t\t\tvalue: 200\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttext: 'All',\n\t\t\t\t\t\t\t\tvalue: this.state.data.length\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<TableHeaderColumn dataField=\"rank\">#</TableHeaderColumn>\n\t\t\t\t\t<TableHeaderColumn dataField=\"id\" isKey>\n\t\t\t\t\t\tUser\n\t\t\t\t\t</TableHeaderColumn>\n\t\t\t\t\t<TableHeaderColumn dataField=\"count\">Count</TableHeaderColumn>\n\t\t\t\t</BootstrapTable>\n\t\t\t</Row>\n\t\t);\n\t}\n}\n\nexport default Ranking;\n","import React from 'react';\nimport * as ApiUrl from '../utils/Api';\nimport Ranking from '../components/Ranking';\n\nconst ACRanking = () => (\n\t<Ranking\n\t\ttitle=\"AC Count Ranking\"\n\t\tfetch={() =>\n\t\t\tApiUrl.fetchACRanking().then((rows) => rows.map((row) => ({ count: row.problem_count, id: row.user_id })))}\n\t/>\n);\n\nexport default ACRanking;\n","import React from 'react';\nimport * as ApiUrl from \"../utils/Api\";\nimport Ranking from \"../components/Ranking\";\n\nconst FastestRanking = () => (\n    <Ranking\n        title=\"Fastest Submission Ranking\"\n        fetch={() => ApiUrl.fetchFastRanking().then(rows => rows.map(row => ({ count: row.problem_count, id: row.user_id })))}\n\n    />\n);\n\nexport default FastestRanking;\n","import React from 'react';\nimport * as ApiUrl from \"../utils/Api\";\nimport Ranking from \"../components/Ranking\";\n\nconst FirstRanking = () => (\n    <Ranking\n        title=\"First AC Ranking\"\n        fetch={() => ApiUrl.fetchFirstRanking().then(rows => rows.map(row => ({ count: row.problem_count, id: row.user_id })))}\n    />\n);\n\nexport default FirstRanking;\n","import React from 'react';\nimport * as ApiUrl from \"../utils/Api\";\nimport Ranking from \"../components/Ranking\";\n\nconst ShortRanking = () => (\n    <Ranking\n        title=\"Top Golfers\"\n        fetch={() => ApiUrl.fetchShortRanking().then(rows => rows.map(row => ({ count: row.problem_count, id: row.user_id })))}\n\n    />\n);\n\nexport default ShortRanking;\n","import React from 'react';\nimport * as ApiUrl from \"../utils/Api\";\nimport Ranking from \"../components/Ranking\";\n\nconst SumRanking = () => (\n    <Ranking\n        title=\"Rated Point Ranking\"\n        fetch={() => ApiUrl.fetchSumRanking().then(rows => rows.map(row => ({ count: row.point_sum, id: row.user_id })))}\n    />\n);\n\nexport default SumRanking;\n","import React from \"react\";\nimport { Row, Col } from \"reactstrap\";\n\nimport * as Api from \"../utils/Api\";\n\nconst ordinalNumbers = [\"1st\", \"2nd\", \"3rd\"];\n\ninterface Ranking {\n  language: string;\n  ranking: { name: string; count: number }[];\n}\n\nconst OneOwner = (props: { entry: Ranking }) => (\n  <div>\n    <Row className=\"justify-content-center my-2 border-bottom\">\n      <h1>{props.entry.language}</h1>\n    </Row>\n    <Row>\n      {props.entry.ranking.slice(0, 3).map((rank, i) => (\n        <Col key={rank.name} className=\"text-center\">\n          <h5>{ordinalNumbers[i]}</h5>\n          <h3>{rank.name}</h3>\n          <h5 className=\"text-muted\">{rank.count} AC</h5>\n        </Col>\n      ))}\n    </Row>\n  </div>\n);\n\ninterface State {\n  rankings: Ranking[];\n}\n\nclass LanguageOwners extends React.Component<{}, State> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      rankings: []\n    };\n  }\n\n  componentDidMount() {\n    Api.fetchLangRanking().then(entries => {\n      const map: Map<string, { name: string; count: number }[]> = new Map();\n      entries.forEach(entry => {\n        const e = {\n          name: entry.user_id,\n          count: entry.count\n        };\n        const arr = map.get(entry.language);\n        if (arr) {\n          arr.push(e);\n        } else {\n          map.set(entry.language, [e]);\n        }\n      });\n\n      const rankings = Array.from(map).map(entry => ({\n        language: entry[0],\n        ranking: entry[1]\n      }));\n      rankings.forEach(ranking =>\n        ranking.ranking.sort((a, b) => b.count - a.count)\n      );\n      this.setState({ rankings });\n    });\n  }\n  render() {\n    return (\n      <div>\n        {this.state.rankings.map(entry => (\n          <OneOwner key={entry.language} entry={entry} />\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default LanguageOwners;\n","export const isAccepted = (result: string) => result === 'AC';\nexport const ordinalSuffixOf = (i: number) => {\n\tconst j = i % 10;\n\tconst k = i % 100;\n\tif (j == 1 && k != 11) {\n\t\treturn 'st';\n\t}\n\tif (j == 2 && k != 12) {\n\t\treturn 'nd';\n\t}\n\tif (j == 3 && k != 13) {\n\t\treturn 'rd';\n\t}\n\treturn 'th';\n};\n","export function formatDate(epoch_second: number) {\n\tconst date = new Date(epoch_second * 1000);\n\tconst year = date.getFullYear();\n\tconst month = date.getMonth() + 1;\n\tconst day = date.getDate();\n\tconst month_str = month < 10 ? '0' + month : month;\n\tconst day_str = day < 10 ? '0' + day : day;\n\treturn year + '-' + month_str + '-' + day_str;\n}\n","const BASE_URL = 'https://atcoder.jp';\n\nexport const formatContestUrl = (contest: string) => `${BASE_URL}/contests/${contest}`;\n\nexport const formatSubmissionUrl = (id: number, contest: string) => `${formatContestUrl(contest)}/submissions/${id}`;\n\nexport const formatProblemUrl = (problem: string, contest: string) => `${formatContestUrl(contest)}/tasks/${problem}`;\n\nexport const formatSolversUrl = (contest: string, problem: string) =>\n\t`${formatContestUrl(contest)}/submissions?f.Task=${problem}&f.Status=AC`;\n","import React from \"react\";\nimport { ButtonGroup, Button, Row } from \"reactstrap\";\n\nimport CalendarHeatmap from \"../../components/CalendarHeatmap\";\nimport Submission from \"../../interfaces/Submission\";\nimport { isAccepted } from \"../../utils\";\n\nenum FilterStatus {\n  AllSubmissions,\n  AllAccepted,\n  UniqueAccepted\n}\n\ninterface Props {\n  submissions: Submission[];\n}\n\ninterface State {\n  filter_status: FilterStatus;\n}\n\nclass FilteringHeatmap extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      filter_status: FilterStatus.AllSubmissions\n    };\n  }\n\n  render() {\n    const filtered_submissions = ((filter_status: FilterStatus) => {\n      switch (filter_status) {\n        case FilterStatus.AllSubmissions:\n          return this.props.submissions;\n        case FilterStatus.AllAccepted:\n          return this.props.submissions.filter(s => isAccepted(s.result));\n        case FilterStatus.UniqueAccepted:\n          const map = this.props.submissions\n            .filter(s => isAccepted(s.result))\n            .sort((a, b) => b.epoch_second - a.epoch_second)\n            .reduce(\n              (map, s) => map.set(s.problem_id, s),\n              new Map<string, Submission>()\n            );\n          return Array.from(map.values());\n        default:\n          throw \"unreachable\";\n      }\n    })(this.state.filter_status);\n\n    return (\n      <div>\n        <Row className=\"my-2\">\n          <ButtonGroup>\n            <Button\n              onClick={() =>\n                this.setState({ filter_status: FilterStatus.AllSubmissions })\n              }\n              active={this.state.filter_status === FilterStatus.AllSubmissions}\n            >\n              All Submissions\n            </Button>\n            <Button\n              onClick={() =>\n                this.setState({ filter_status: FilterStatus.AllAccepted })\n              }\n              active={this.state.filter_status === FilterStatus.AllAccepted}\n            >\n              All AC\n            </Button>\n            <Button\n              onClick={() =>\n                this.setState({ filter_status: FilterStatus.UniqueAccepted })\n              }\n              active={this.state.filter_status === FilterStatus.UniqueAccepted}\n            >\n              Unique AC\n            </Button>\n          </ButtonGroup>\n        </Row>\n        <Row>\n          <CalendarHeatmap\n            data={filtered_submissions.map(\n              s => new Date(s.epoch_second * 1000)\n            )}\n            formatTooltip={(date: string, count: number) => {\n              let unit = \"\";\n              if (this.state.filter_status === FilterStatus.AllAccepted) {\n                unit = \"AC\";\n              } else if (\n                this.state.filter_status == FilterStatus.AllSubmissions\n              ) {\n                unit = \"Submissions\";\n              } else {\n                unit = \"Unique AC\";\n              }\n              return `${date} ${count} ${unit}`;\n            }}\n          />\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default FilteringHeatmap;\n","import React from 'react';\nimport { BootstrapTable, TableHeaderColumn } from 'react-bootstrap-table';\nimport { Badge } from 'reactstrap';\n\nimport { isAccepted } from '../utils';\nimport { formatDate } from '../utils/DateFormat';\nimport * as Api from '../utils/Api';\nimport * as Url from '../utils/Url';\nimport MergedProblem from '../interfaces/MergedProblem';\nimport Contest from '../interfaces/Contest';\nimport Submission from '../interfaces/Submission';\n\nconst INF_POINT = 1e18;\n\ninterface Problem extends MergedProblem {\n\tshowing_point: number;\n\tdate: string;\n\n\tcontest: Contest;\n\n\tstatus: string;\n\trivals: string[];\n\n\tlast_ac_date: string;\n}\n\ninterface Props {\n\tuser_ids: string[];\n}\n\ninterface State {\n\tproblems: Problem[];\n}\n\nclass ListPage extends React.Component<Props, State> {\n\tconstructor(props: any) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tproblems: []\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\tPromise.all([ Api.fetchMergedProblems(), Api.fetchContests() ]).then((result) => {\n\t\t\tconst [ merged_problems, contests ] = result;\n\t\t\tconst contest_map = contests.reduce(\n\t\t\t\t(map, contest) => map.set(contest.id, contest),\n\t\t\t\tnew Map<string, Contest>()\n\t\t\t);\n\n\t\t\tconst problems: Problem[] = merged_problems.map((problem) => {\n\t\t\t\tconst showing_point = (() => {\n\t\t\t\t\tif (problem.point) {\n\t\t\t\t\t\treturn problem.point;\n\t\t\t\t\t} else if (problem.predict) {\n\t\t\t\t\t\treturn problem.predict;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn INF_POINT;\n\t\t\t\t\t}\n\t\t\t\t})();\n\n\t\t\t\tconst contest = (() => {\n\t\t\t\t\tlet contest = contest_map.get(problem.contest_id);\n\t\t\t\t\tif (contest) {\n\t\t\t\t\t\treturn contest;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow `${problem.id} is not belonged to any contest.`;\n\t\t\t\t\t}\n\t\t\t\t})();\n\n\t\t\t\tconst date = formatDate(contest.start_epoch_second);\n\n\t\t\t\tconst status = '';\n\t\t\t\tconst rivals: string[] = [];\n\t\t\t\tconst last_ac_date = '';\n\n\t\t\t\treturn { status, showing_point, contest, date, rivals, last_ac_date, ...problem };\n\t\t\t});\n\n\t\t\tproblems.sort((a, b) => {\n\t\t\t\tif (a.contest.start_epoch_second == b.contest.start_epoch_second) {\n\t\t\t\t\tif (a.title < b.title) {\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t} else if (a.title > b.title) {\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\treturn b.contest.start_epoch_second - a.contest.start_epoch_second;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis.setState({ problems }, () => this.updateProblems(this.props.user_ids));\n\t\t});\n\t}\n\n\tcomponentDidUpdate(prevProps: Props, prevState: State) {\n\t\tif (prevProps.user_ids !== this.props.user_ids) {\n\t\t\tthis.updateProblems(this.props.user_ids);\n\t\t}\n\t}\n\n\tupdateProblems(user_ids: string[]) {\n\t\treturn Promise.all(user_ids.map(Api.fetchSubmissions)).then((r) => r.flat()).then((submissions) => {\n\t\t\tconst submission_map = submissions\n\t\t\t\t.sort((a, b) => a.epoch_second - b.epoch_second)\n\t\t\t\t.reduce((map, submission) => {\n\t\t\t\t\tconst arr = map.get(submission.problem_id);\n\t\t\t\t\tif (arr) {\n\t\t\t\t\t\tarr.push(submission);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmap.set(submission.problem_id, [ submission ]);\n\t\t\t\t\t}\n\t\t\t\t\treturn map;\n\t\t\t\t}, new Map<string, Submission[]>());\n\n\t\t\tconst user = user_ids.length > 0 ? user_ids[0] : '';\n\t\t\tconst rivals = this.props.user_ids.slice(1);\n\n\t\t\tconst problems = this.state.problems.map((problem) => {\n\t\t\t\tconst submissions = (() => {\n\t\t\t\t\tconst s = submission_map.get(problem.id);\n\t\t\t\t\treturn s ? s : [];\n\t\t\t\t})();\n\n\t\t\t\tconst new_status = (() => {\n\t\t\t\t\tconst mine = submissions.filter((s) => s.user_id === user);\n\t\t\t\t\tif (mine.some((s) => isAccepted(s.result))) {\n\t\t\t\t\t\treturn 'AC';\n\t\t\t\t\t} else if (mine.length > 0) {\n\t\t\t\t\t\treturn mine[mine.length - 1].result;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t})();\n\n\t\t\t\tconst new_rivals_set = (() =>\n\t\t\t\t\tsubmissions\n\t\t\t\t\t\t.filter((s) => rivals.includes(s.user_id))\n\t\t\t\t\t\t.filter((s) => isAccepted(s.result))\n\t\t\t\t\t\t.reduce((set, submission) => set.add(submission.user_id), new Set<string>()))();\n\t\t\t\tconst new_rivals = Array.from(new_rivals_set).sort();\n\t\t\t\tconst new_ac_date = (() => {\n\t\t\t\t\tlet s = submissions.filter((s) => s.user_id === user).filter((s) => isAccepted(s.result)).reverse();\n\t\t\t\t\tif (s.length > 0) {\n\t\t\t\t\t\treturn formatDate(s[0].epoch_second);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t})();\n\t\t\t\tif (\n\t\t\t\t\tnew_status !== problem.status ||\n\t\t\t\t\tnew_rivals !== problem.rivals ||\n\t\t\t\t\tnew_ac_date !== problem.last_ac_date\n\t\t\t\t) {\n\t\t\t\t\tconst new_problem = Object.assign({}, problem);\n\t\t\t\t\tnew_problem.rivals = new_rivals;\n\t\t\t\t\tnew_problem.status = new_status;\n\t\t\t\t\tnew_problem.last_ac_date = new_ac_date;\n\t\t\t\t\treturn new_problem;\n\t\t\t\t} else {\n\t\t\t\t\treturn problem;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis.setState({ problems });\n\t\t});\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<BootstrapTable\n\t\t\t\tpagination\n\t\t\t\tkeyField=\"id\"\n\t\t\t\theight=\"auto\"\n\t\t\t\thover\n\t\t\t\tstriped\n\t\t\t\ttrClassName={(problem: Problem) => {\n\t\t\t\t\tif (isAccepted(problem.status)) {\n\t\t\t\t\t\treturn 'table-success';\n\t\t\t\t\t} else if (problem.rivals.length > 0) {\n\t\t\t\t\t\treturn 'table-danger';\n\t\t\t\t\t} else if (problem.status.length > 0) {\n\t\t\t\t\t\treturn 'table-warning';\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t}}\n\t\t\t\tdata={this.state.problems}\n\t\t\t\toptions={{\n\t\t\t\t\tpaginationPosition: 'top',\n\t\t\t\t\tsizePerPage: 20,\n\t\t\t\t\tsizePerPageList: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttext: '20',\n\t\t\t\t\t\t\tvalue: 20\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttext: '50',\n\t\t\t\t\t\t\tvalue: 50\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttext: '100',\n\t\t\t\t\t\t\tvalue: 100\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttext: '200',\n\t\t\t\t\t\t\tvalue: 200\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttext: 'All',\n\t\t\t\t\t\t\tvalue: this.state.problems.length\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<TableHeaderColumn dataField=\"date\" dataSort>\n\t\t\t\t\tDate\n\t\t\t\t</TableHeaderColumn>\n\t\t\t\t<TableHeaderColumn\n\t\t\t\t\tdataSort\n\t\t\t\t\tdataField=\"title\"\n\t\t\t\t\tdataFormat={(_: string, row: Problem) => (\n\t\t\t\t\t\t<a href={Url.formatProblemUrl(row.id, row.contest_id)} target=\"_blank\">\n\t\t\t\t\t\t\t{row.title}\n\t\t\t\t\t\t</a>\n\t\t\t\t\t)}\n\t\t\t\t>\n\t\t\t\t\tProblem\n\t\t\t\t</TableHeaderColumn>\n\t\t\t\t<TableHeaderColumn\n\t\t\t\t\tdataSort\n\t\t\t\t\tdataField=\"contest_id\"\n\t\t\t\t\tdataFormat={(contest_id: string, problem: Problem) => (\n\t\t\t\t\t\t<a href={Url.formatContestUrl(contest_id)} target=\"_blank\">\n\t\t\t\t\t\t\t{problem.contest.title}\n\t\t\t\t\t\t</a>\n\t\t\t\t\t)}\n\t\t\t\t>\n\t\t\t\t\tContest\n\t\t\t\t</TableHeaderColumn>\n\t\t\t\t<TableHeaderColumn\n\t\t\t\t\tdataField=\"id\"\n\t\t\t\t\tdataAlign=\"center\"\n\t\t\t\t\tdataFormat={(id: string, problem: Problem) => {\n\t\t\t\t\t\tif (isAccepted(problem.status)) {\n\t\t\t\t\t\t\treturn <Badge color=\"success\">AC</Badge>;\n\t\t\t\t\t\t} else if (problem.rivals.length > 0) {\n\t\t\t\t\t\t\treturn <div>{problem.rivals.map((r) => <Badge color=\"danger\">{r}</Badge>)}</div>;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn <Badge color=\"warning\">{problem.status}</Badge>;\n\t\t\t\t\t\t}\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\tResult\n\t\t\t\t</TableHeaderColumn>\n\t\t\t\t<TableHeaderColumn dataSort dataField=\"last_ac_date\">\n\t\t\t\t\tLast AC Date\n\t\t\t\t</TableHeaderColumn>\n\t\t\t\t<TableHeaderColumn\n\t\t\t\t\tdataSort\n\t\t\t\t\tdataField=\"solver_count\"\n\t\t\t\t\tdataFormat={(cell: number, row: Problem) => (\n\t\t\t\t\t\t<a href={Url.formatSolversUrl(row.contest_id, row.id)} target=\"_blank\">\n\t\t\t\t\t\t\t{cell}\n\t\t\t\t\t\t</a>\n\t\t\t\t\t)}\n\t\t\t\t>\n\t\t\t\t\tSolvers\n\t\t\t\t</TableHeaderColumn>\n\t\t\t\t<TableHeaderColumn\n\t\t\t\t\tdataField=\"showing_point\"\n\t\t\t\t\tdataFormat={(showing_point: any) => {\n\t\t\t\t\t\tif (showing_point >= INF_POINT) {\n\t\t\t\t\t\t\treturn '-';\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (showing_point % 100 == 0) {\n\t\t\t\t\t\t\t\treturn showing_point;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn showing_point.toFixed(2);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}}\n\t\t\t\t\tdataSort\n\t\t\t\t>\n\t\t\t\t\tPoint\n\t\t\t\t</TableHeaderColumn>\n\t\t\t\t<TableHeaderColumn\n\t\t\t\t\tdataField=\"execution_time\"\n\t\t\t\t\tdataSort\n\t\t\t\t\tdataFormat={(_: number, row: Problem) => (\n\t\t\t\t\t\t<a\n\t\t\t\t\t\t\thref={Url.formatSubmissionUrl(row.fastest_submission_id, row.fastest_contest_id)}\n\t\t\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{row.fastest_user_id} ({row.execution_time} ms)\n\t\t\t\t\t\t</a>\n\t\t\t\t\t)}\n\t\t\t\t>\n\t\t\t\t\tFastest\n\t\t\t\t</TableHeaderColumn>\n\t\t\t\t<TableHeaderColumn\n\t\t\t\t\tdataField=\"source_code_length\"\n\t\t\t\t\tdataSort\n\t\t\t\t\tdataFormat={(_: number, row: Problem) => (\n\t\t\t\t\t\t<a\n\t\t\t\t\t\t\thref={Url.formatSubmissionUrl(row.shortest_submission_id, row.shortest_contest_id)}\n\t\t\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{row.shortest_user_id} ({row.source_code_length} Bytes)\n\t\t\t\t\t\t</a>\n\t\t\t\t\t)}\n\t\t\t\t>\n\t\t\t\t\tShortest\n\t\t\t\t</TableHeaderColumn>\n\t\t\t\t<TableHeaderColumn\n\t\t\t\t\tdataField=\"first_user_id\"\n\t\t\t\t\tdataSort\n\t\t\t\t\tdataFormat={(_: string, row: Problem) => (\n\t\t\t\t\t\t<a\n\t\t\t\t\t\t\thref={Url.formatSubmissionUrl(row.first_submission_id, row.first_contest_id)}\n\t\t\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{row.first_user_id}\n\t\t\t\t\t\t</a>\n\t\t\t\t\t)}\n\t\t\t\t>\n\t\t\t\t\tFirst\n\t\t\t\t</TableHeaderColumn>\n\t\t\t</BootstrapTable>\n\t\t);\n\t}\n}\n\nexport default ListPage;\n","import React from \"react\";\nimport { Row } from \"reactstrap\";\nimport {\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  LineChart,\n  Line,\n  ResponsiveContainer\n} from \"recharts\";\n\nimport { formatDate } from \"../../utils/DateFormat\";\n\nconst ClimingLineChart = ({\n  climing_data\n}: {\n  climing_data: { date: number; count: number }[];\n}) => (\n  <Row className=\"my-3\">\n    <ResponsiveContainer width=\"100%\" height={300}>\n      <LineChart\n        data={climing_data}\n        margin={{\n          top: 5,\n          right: 30,\n          left: 20,\n          bottom: 5\n        }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis\n          dataKey=\"date\"\n          type=\"number\"\n          domain={[\"dataMin\", \"dataMax\"]}\n          tickFormatter={(ms: number) => formatDate(ms / 1000)}\n        />\n        <YAxis />\n        <Tooltip labelFormatter={(v: any) => formatDate(v / 1000)} />\n        <Line dataKey=\"count\" stroke=\"#8884d8\" />\n      </LineChart>\n    </ResponsiveContainer>\n  </Row>\n);\nexport default ClimingLineChart;\n","import React from \"react\";\nimport { Row } from \"reactstrap\";\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer\n} from \"recharts\";\n\nimport { formatDate } from \"../../utils/DateFormat\";\n\nconst DailyEffortBarChart = ({\n  daily_data\n}: {\n  daily_data: { date: number; count: number }[];\n}) => (\n  <Row className=\"my-3\">\n    <ResponsiveContainer width=\"100%\" height={300}>\n      <BarChart\n        data={daily_data}\n        margin={{\n          top: 5,\n          right: 30,\n          left: 20,\n          bottom: 5\n        }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis\n          dataKey=\"date\"\n          type=\"number\"\n          domain={[\"dataMin\", \"dataMax\"]}\n          tickFormatter={(ms: number) => formatDate(ms / 1000)}\n        />\n        <YAxis />\n        <Tooltip labelFormatter={(v: any) => formatDate(v / 1000)} />\n        <Bar dataKey=\"count\" fill=\"#8884d8\" />\n      </BarChart>\n    </ResponsiveContainer>\n  </Row>\n);\n\nexport default DailyEffortBarChart;\n","import React from \"react\";\nimport {\n  PieChart,\n  Pie,\n  ResponsiveContainer,\n  Cell,\n  Tooltip,\n  Legend\n} from \"recharts\";\n\nconst COLORS = {\n  Accepted: \"#32cd32\",\n  Trying: \"#58616a\"\n};\n\nconst SmallPieChart = ({\n  title,\n  trying,\n  accepted\n}: {\n  title: string;\n  trying: number;\n  accepted: number;\n}) => {\n  const data = [\n    { value: accepted, color: COLORS.Accepted, name: \"Accepted\" },\n    { value: trying, color: COLORS.Trying, name: \"Trying\" }\n  ];\n  return (\n    <div>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <PieChart>\n          <Pie dataKey=\"value\" data={data} outerRadius=\"80%\" fill=\"#ff0000\">\n            {data.map((e, i) => (\n              <Cell key={e.name} fill={e.color} />\n            ))}\n          </Pie>\n          <Tooltip />\n          <Legend />\n        </PieChart>\n      </ResponsiveContainer>\n      <h5>{title}</h5>\n      <h5 className=\"text-muted\">{`${accepted} / ${accepted + trying}`}</h5>\n    </div>\n  );\n};\n\nexport default SmallPieChart;\n","import React from \"react\";\nimport { UncontrolledTooltip } from \"reactstrap\";\n\nconst WEEKDAY = 7;\nconst WEEKS = 53;\nconst COLORS = [\"#ebedf0\", \"#c6e48b\", \"#7bc96f\", \"#239a3b\", \"#196127\"];\n\nconst formatDate = (date: Date) => {\n  const year = date.getFullYear();\n  const month = date.getMonth() + 1;\n  const day = date.getDate();\n  const month_str = month < 10 ? \"0\" + month : month;\n  const day_str = day < 10 ? \"0\" + day : day;\n  return year + \"-\" + month_str + \"-\" + day_str;\n};\n\ninterface Props {\n  data: Date[];\n  formatTooltip?: (date: string, count: number) => string;\n}\n\nclass CalendarHeatmap extends React.Component<Props> {\n  render() {\n    const next_sunday = new Date();\n    while (next_sunday.getDay() != 0) {\n      next_sunday.setDate(next_sunday.getDate() + 1);\n    }\n\n    const current_date = new Date(next_sunday);\n    current_date.setDate(current_date.getDate() - WEEKS * WEEKDAY);\n\n    const count_map = new Map<string, number>();\n    while (formatDate(current_date) !== formatDate(next_sunday)) {\n      count_map.set(formatDate(current_date), 0);\n      current_date.setDate(current_date.getDate() + 1);\n    }\n\n    this.props.data.forEach(date => {\n      const s = formatDate(date);\n      const count = count_map.get(s);\n      if (count !== undefined) {\n        count_map.set(s, count + 1);\n      }\n    });\n\n    const table_data = Array.from(count_map)\n      .map(([date, count]) => ({ count, date }))\n      .sort((a, b) => {\n        if (a.date < b.date) {\n          return -1;\n        } else {\n          return 1;\n        }\n      });\n\n    const tabled: { count: number; date: string }[][] = [];\n\n    for (let day_of_week = 0; day_of_week < WEEKDAY; day_of_week++) {\n      const week_row: { count: number; date: string }[] = [];\n      for (let week = 0; week < WEEKS; week++) {\n        week_row.push(table_data[WEEKDAY * week + day_of_week]);\n      }\n      tabled.push(week_row);\n    }\n\n    const block_width = 10;\n    const width = block_width * WEEKS;\n    const height = block_width * WEEKDAY;\n    return (\n      <div>\n        <svg viewBox={`0 0 ${width} ${height}`}>\n          {tabled.map((row, i) =>\n            row.map((day, j) => {\n              const { date, count } = day;\n              const color = COLORS[Math.min(count, COLORS.length - 1)];\n              return (\n                <rect\n                  key={date}\n                  id={`rect-${date}`}\n                  x={j * block_width}\n                  y={i * block_width}\n                  width={block_width}\n                  height={block_width}\n                  fill={color}\n                />\n              );\n            })\n          )}\n        </svg>\n\n        {tabled.map((row, i) =>\n          row.map((day, j) => {\n            const { date, count } = day;\n\n            return (\n              <UncontrolledTooltip\n                delay={{ show: 0, hide: 0 }}\n                key={date}\n                placement=\"right\"\n                target={`rect-${date}`}\n              >\n                {this.props.formatTooltip\n                  ? this.props.formatTooltip(date, count)\n                  : `${date}: ${count}`}\n              </UncontrolledTooltip>\n            );\n          })\n        )}\n      </div>\n    );\n  }\n}\n\nexport default CalendarHeatmap;\n","import React from \"react\";\nimport { Row, Table } from \"reactstrap\";\nimport { BootstrapTable, TableHeaderColumn } from \"react-bootstrap-table\";\nimport { isAccepted } from \"../utils\";\n\nimport * as Api from \"../utils/Api\";\nimport * as Url from \"../utils/Url\";\nimport Contest from \"../interfaces/Contest\";\nimport Problem from \"../interfaces/Problem\";\n\nenum Status {\n  Nothing = 0,\n  Trying = 1,\n  RivalSolved = 2,\n  Solved = 3\n}\n\ninterface ProblemWithStatus extends Problem {\n  status: Status;\n  contest: Contest;\n}\n\ninterface Props {\n  user_ids: string[];\n}\n\ninterface State {\n  contests: Contest[];\n  problems: ProblemWithStatus[];\n}\n\nclass TablePage extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      contests: [],\n      problems: []\n    };\n  }\n\n  componentDidMount() {\n    Promise.all([Api.fetchProblems(), Api.fetchContests()]).then(\n      ([initialProblems, contests]) => {\n        const contest_map = new Map(\n          contests.map(c => [c.id, c] as [string, Contest])\n        );\n        const problems = initialProblems.map(p => {\n          const contest = contest_map.get(p.contest_id);\n          if (!contest) {\n            throw `${p.contest_id} does not exist!`;\n          }\n          const status = Status.Nothing;\n          return { status, contest, ...p };\n        });\n\n        this.setState({ problems, contests }, () => {\n          this.updateState(this.props.user_ids);\n        });\n      }\n    );\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (this.props !== prevProps) {\n      this.updateState(this.props.user_ids);\n    }\n  }\n\n  updateState(user_ids: string[]) {\n    const user = user_ids.length > 0 ? user_ids[0] : \"\";\n    const rivals = user_ids.slice(1);\n    Promise.all(user_ids.map(user_id => Api.fetchSubmissions(user_id)))\n      .then(r => r.flat())\n      .then(submissions =>\n        submissions\n          .filter(\n            s =>\n              s.user_id === user ||\n              (rivals.includes(s.user_id) && isAccepted(s.result))\n          )\n          .map(s => {\n            const problem_id = s.problem_id;\n            if (s.user_id === user) {\n              if (isAccepted(s.result)) {\n                return { problem_id, status: Status.Solved };\n              } else {\n                return { problem_id, status: Status.Trying };\n              }\n            } else {\n              return { problem_id, status: Status.RivalSolved };\n            }\n          })\n          .sort((a, b) => a.status - b.status)\n          .reduce(\n            (map, s) => map.set(s.problem_id, s.status),\n            new Map<string, Status>()\n          )\n      )\n      .then(map => {\n        const problems = this.state.problems.map(p => {\n          const status = map.get(p.id);\n          const problem = Object.assign({}, p);\n          problem.status = Status.Nothing;\n          if (status !== undefined) {\n            problem.status = status;\n          }\n          return problem;\n        });\n        this.setState({ problems });\n      });\n  }\n\n  render() {\n    const [abc, arc] = createAtCoderBeginnerRegularContestTable(\n      this.state.contests,\n      this.state.problems\n    );\n    const agc = createAtCoderGrandContestTable(\n      this.state.contests,\n      this.state.problems\n    );\n    abc.forEach(row => {\n      row.problems = row.problems.slice(0, 4);\n    });\n    arc.forEach(row => {\n      const length = row.problems.length;\n      row.problems = row.problems.slice(length - 4, length);\n    });\n\n    const other_contest_map = this.state.problems\n      .filter(p => !p.contest.id.match(/^a[rgb]c\\d{3}$/))\n      .reduce((map, problem) => {\n        const list = map.get(problem.contest.id);\n        if (list) {\n          list.push(problem);\n        } else {\n          map.set(problem.contest.id, [problem]);\n        }\n        return map;\n      }, new Map<string, ProblemWithStatus[]>());\n\n    const other_contests = Array.from(other_contest_map)\n      .map(([contest_id, problems]) => {\n        return {\n          contest: problems[0].contest,\n          problems\n        };\n      })\n      .sort(\n        (a, b) => b.contest.start_epoch_second - a.contest.start_epoch_second\n      );\n\n    return (\n      <div>\n        <Row>\n          <h2>AtCoder Grand Contest</h2>\n          <BootstrapTable data={agc} keyField=\"contest_id\">\n            <TableHeaderColumn\n              dataField=\"contest_id\"\n              dataFormat={(contest_id: string) => (\n                <a href={Url.formatContestUrl(contest_id)} target=\"_blank\">\n                  {contest_id.toUpperCase()}\n                </a>\n              )}\n            >\n              Contest\n            </TableHeaderColumn>\n            {\"ABCDEF\".split(\"\").map((c, i) => (\n              <TableHeaderColumn\n                dataField={c}\n                key={c}\n                columnClassName={(\n                  _: any,\n                  { problems }: { problems: ProblemWithStatus[] }\n                ) => {\n                  const problem = problems[i];\n                  if (problem) {\n                    switch (problems[i].status) {\n                      case Status.Nothing:\n                        return \"\";\n                      case Status.Solved:\n                        return \"table-success\";\n                      case Status.Trying:\n                        return \"table-warning\";\n                      case Status.RivalSolved:\n                        return \"table-danger\";\n                      default:\n                        return \"\";\n                    }\n                  } else {\n                    return \"\";\n                  }\n                }}\n                dataFormat={(\n                  _: any,\n                  row: { contest_id: string; problems: ProblemWithStatus[] }\n                ) => {\n                  const problem = row.problems[i];\n                  if (problem) {\n                    return (\n                      <a\n                        target=\"_blank\"\n                        href={Url.formatProblemUrl(\n                          problem.id,\n                          problem.contest_id\n                        )}\n                      >\n                        {problem.title}\n                      </a>\n                    );\n                  } else {\n                    return \"-\";\n                  }\n                }}\n              >\n                {c}\n              </TableHeaderColumn>\n            ))}\n          </BootstrapTable>\n        </Row>\n        <AtCoderRegularTable contests={abc} title=\"AtCoder Beginner Contest\" />\n        <AtCoderRegularTable contests={arc} title=\"AtCoder Regular Contest\" />\n        <Row className=\"my-4\">\n          <h2>Other Contests</h2>\n        </Row>\n        <ContestTable contests={other_contests} />\n      </div>\n    );\n  }\n}\n\nconst ContestTable = ({\n  contests\n}: {\n  contests: { contest: Contest; problems: ProblemWithStatus[] }[];\n}) => (\n  <div>\n    {contests.map(({ contest, problems }) => (\n      <div key={contest.id}>\n        <h5>\n          <strong>\n            <a target=\"_blank\" href={Url.formatContestUrl(contest.id)}>\n              {contest.title}\n            </a>\n          </strong>\n        </h5>\n        <Table striped bordered hover responsive>\n          <tbody>\n            <tr>\n              {problems\n                .sort((a, b) => {\n                  if (a.title > b.title) {\n                    return 1;\n                  } else {\n                    return -1;\n                  }\n                })\n                .map(p => {\n                  const class_name = ((status: Status) => {\n                    switch (status) {\n                      case Status.Nothing:\n                        return \"\";\n                      case Status.Solved:\n                        return \"table-success\";\n                      case Status.Trying:\n                        return \"table-warning\";\n                      case Status.RivalSolved:\n                        return \"table-danger\";\n                      default:\n                        throw \"unreachable\";\n                    }\n                  })(p.status);\n\n                  return (\n                    <td key={p.id} className={class_name}>\n                      <a\n                        target=\"_blank\"\n                        href={Url.formatProblemUrl(p.id, p.contest_id)}\n                      >\n                        {p.title}\n                      </a>\n                    </td>\n                  );\n                })}\n            </tr>\n          </tbody>\n        </Table>\n      </div>\n    ))}\n  </div>\n);\n\nconst AtCoderRegularTable = ({\n  contests,\n  title\n}: {\n  contests: { contest_id: string; problems: ProblemWithStatus[] }[];\n  title: string;\n}) => (\n  <Row className=\"my-4\">\n    <h2>{title}</h2>\n    <BootstrapTable data={contests}>\n      <TableHeaderColumn\n        isKey\n        dataField=\"contest_id\"\n        dataFormat={(\n          _: any,\n          row: { contest_id: string; problems: ProblemWithStatus[] }\n        ) => (\n          <a href={Url.formatContestUrl(row.contest_id)} target=\"_blank\">\n            {row.contest_id.toUpperCase()}\n          </a>\n        )}\n      >\n        Contest\n      </TableHeaderColumn>\n      {\"ABCD\".split(\"\").map((c, i) => (\n        <TableHeaderColumn\n          dataField={c}\n          key={c}\n          columnClassName={(\n            _: any,\n            { problems }: { problems: ProblemWithStatus[] }\n          ) => {\n            switch (problems[i].status) {\n              case Status.Nothing:\n                return \"\";\n              case Status.Solved:\n                return \"table-success\";\n              case Status.Trying:\n                return \"table-warning\";\n              case Status.RivalSolved:\n                return \"table-danger\";\n              default:\n                return \"\";\n            }\n          }}\n          dataFormat={(\n            _: any,\n            { problems }: { contest_id: string; problems: ProblemWithStatus[] }\n          ) => (\n            <a\n              href={Url.formatProblemUrl(\n                problems[i].id,\n                problems[i].contest_id\n              )}\n              target=\"_blank\"\n            >\n              {problems[i].title}\n            </a>\n          )}\n        >\n          {c}\n        </TableHeaderColumn>\n      ))}\n    </BootstrapTable>\n  </Row>\n);\n\nconst createAtCoderGrandContestTable = (\n  contests: Contest[],\n  problems: ProblemWithStatus[]\n) => {\n  const map = new Map(\n    contests\n      .filter(c => c.id.match(/^agc\\d{3}$/))\n      .map(c => [c.id, []] as [string, ProblemWithStatus[]])\n  );\n  problems\n    .filter(p => p.id.match(/^agc\\d{3}_\\w$/))\n    .forEach(p => {\n      const contest_id = p.id.slice(0, 6);\n      const list = map.get(contest_id);\n      if (!list) {\n        throw `${contest_id} does not exist!`;\n      }\n      list.push(p);\n    });\n\n  return Array.from(map)\n    .sort(([a, pa], [b, pb]) => {\n      if (b > a) {\n        return 1;\n      } else {\n        return -1;\n      }\n    })\n    .map(([contest_id, problems]) => {\n      problems.sort((a, b) => {\n        if (a.id > b.id) {\n          return 1;\n        } else {\n          return -1;\n        }\n      });\n      return { contest_id, problems };\n    });\n};\n\nconst createAtCoderBeginnerRegularContestTable = (\n  contests: Contest[],\n  problems: ProblemWithStatus[]\n) => {\n  type Pair = [Contest, ProblemWithStatus[]];\n  const abc_map = new Map(\n    contests\n      .filter(c => c.id.match(/^abc\\d{3}$/))\n      .map(c => [c.start_epoch_second, [c, []]] as [number, Pair])\n  );\n  const arc_map = new Map(\n    contests\n      .filter(c => c.id.match(/^arc\\d{3}$/))\n      .map(c => [c.start_epoch_second, [c, []]] as [number, Pair])\n  );\n  const pushToMap = (map: Map<number, Pair>) => {\n    problems.forEach(p => {\n      const entry = map.get(p.contest.start_epoch_second);\n      if (entry) {\n        entry[1].push(p);\n      }\n    });\n  };\n  pushToMap(abc_map);\n  pushToMap(arc_map);\n  const sortMap = (map: Map<number, Pair>) => {\n    return Array.from(map.values())\n      .sort(([a, pa], [b, pb]) => b.start_epoch_second - a.start_epoch_second)\n      .map(([contest, problems]) => {\n        problems.sort((a, b) => {\n          if (a.id > b.id) {\n            return 1;\n          } else {\n            return -1;\n          }\n        });\n        return { contest_id: contest.id, problems };\n      });\n  };\n  const abc = sortMap(abc_map);\n  const arc = sortMap(arc_map);\n  return [abc, arc];\n};\n\nexport default TablePage;\n","import React from \"react\";\nimport { BootstrapTable, TableHeaderColumn } from \"react-bootstrap-table\";\n\nimport Submission from \"../../interfaces/Submission\";\nimport { formatDate } from \"../../utils/DateFormat\";\nimport * as Url from \"../../utils/Url\";\nimport { isAccepted } from \"../../utils\";\nimport { Badge } from \"reactstrap\";\nimport { string } from \"prop-types\";\n\nconst SubmissionList = ({\n  submissions,\n  problems\n}: {\n  submissions: Submission[];\n  problems: { id: string; title: string }[];\n}) => {\n  const title_map = problems.reduce(\n    (map, p) => map.set(p.id, p.title),\n    new Map<string, string>()\n  );\n  return (\n    <BootstrapTable\n      data={submissions.sort((a, b) => b.epoch_second - a.epoch_second)}\n      keyField=\"id\"\n      height=\"auto\"\n      hover\n      striped\n      pagination\n      options={{\n        paginationPosition: \"top\",\n        sizePerPage: 20,\n        sizePerPageList: [\n          {\n            text: \"20\",\n            value: 20\n          },\n          {\n            text: \"50\",\n            value: 50\n          },\n          {\n            text: \"100\",\n            value: 100\n          },\n          {\n            text: \"200\",\n            value: 200\n          },\n          {\n            text: \"All\",\n            value: submissions.length\n          }\n        ]\n      }}\n    >\n      <TableHeaderColumn\n        dataSort\n        dataField=\"epoch_second\"\n        dataFormat={(second: number) => formatDate(second)}\n      >\n        Date\n      </TableHeaderColumn>\n      <TableHeaderColumn\n        dataSort\n        dataField=\"problem_id\"\n        dataFormat={(_: string, { problem_id, contest_id }: Submission) => (\n          <a\n            target=\"_blank\"\n            href={Url.formatProblemUrl(problem_id, contest_id)}\n          >\n            {title_map.get(problem_id)}\n          </a>\n        )}\n      >\n        Problem\n      </TableHeaderColumn>\n      <TableHeaderColumn\n        dataSort\n        dataField=\"result\"\n        dataAlign=\"center\"\n        dataFormat={result =>\n          isAccepted(result) ? (\n            <Badge color=\"success\">{result}</Badge>\n          ) : (\n            <Badge color=\"warning\">{result}</Badge>\n          )\n        }\n      >\n        Status\n      </TableHeaderColumn>\n      <TableHeaderColumn dataSort dataField=\"language\">\n        Language\n      </TableHeaderColumn>\n      <TableHeaderColumn\n        dataSort\n        dataField=\"id\"\n        dataFormat={(_: number, { id, contest_id }: Submission) => (\n          <a target=\"_blank\" href={Url.formatSubmissionUrl(id, contest_id)}>\n            Detail\n          </a>\n        )}\n      >\n        Detail\n      </TableHeaderColumn>\n    </BootstrapTable>\n  );\n};\n\nexport default SubmissionList;\n","import React from \"react\";\nimport { Row, Col } from \"reactstrap\";\nimport {\n  BarChart,\n  Bar,\n  Cell,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  LineChart,\n  Line,\n  ResponsiveContainer\n} from \"recharts\";\n\nimport * as Api from \"../../utils/Api\";\nimport Submission from \"../../interfaces/Submission\";\nimport UserInfo from \"../../interfaces/UserInfo\";\nimport MergedProblem from \"../../interfaces/MergedProblem\";\nimport { ordinalSuffixOf, isAccepted } from \"../../utils\";\nimport { formatDate } from \"../../utils/DateFormat\";\n\nimport ClimingLineChart from \"./ClimingLineChart\";\nimport DailyEffortBarChart from \"./DailyEffortBarChart\";\nimport SmallPieChart from \"./SmallPieChart\";\nimport FilteringHeatmap from \"./FilteringHeatmap\";\nimport SubmissionList from \"./SubmissionList\";\n\ninterface Props {\n  user_ids: string[];\n}\n\ninterface RankingEntry {\n  problem_count: number;\n  user_id: string;\n}\n\ninterface State {\n  first_ranking: RankingEntry[];\n  fast_ranking: RankingEntry[];\n  short_ranking: RankingEntry[];\n\n  problems: MergedProblem[];\n  submissions: Submission[];\n  user_info: UserInfo;\n\n  current_streak: number;\n  longest_streak: number;\n  last_ac: string;\n\n  daily_data: { date: number; count: number }[];\n}\n\nclass UserPage extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      first_ranking: [],\n      fast_ranking: [],\n      short_ranking: [],\n\n      problems: [],\n      submissions: [],\n      user_info: {\n        accepted_count: 1e9 + 7,\n        accepted_count_rank: 1e9 + 7,\n        rated_point_sum: 1e9 + 7,\n        rated_point_sum_rank: 1e9 + 7,\n        user_id: \"\"\n      },\n\n      current_streak: 1e9 + 7,\n      longest_streak: 1e9 + 7,\n      last_ac: \"\",\n\n      daily_data: []\n    };\n  }\n\n  componentDidMount() {\n    Api.fetchFirstRanking()\n      .then(ranking =>\n        ranking.sort((a, b) => b.problem_count - a.problem_count)\n      )\n      .then(first_ranking => this.setState({ first_ranking }));\n    Api.fetchShortRanking()\n      .then(ranking =>\n        ranking.sort((a, b) => b.problem_count - a.problem_count)\n      )\n      .then(short_ranking => this.setState({ short_ranking }));\n    Api.fetchFastRanking()\n      .then(ranking =>\n        ranking.sort((a, b) => b.problem_count - a.problem_count)\n      )\n      .then(fast_ranking => this.setState({ fast_ranking }));\n    Api.fetchMergedProblems().then(problems => this.setState({ problems }));\n    this.updateState(this.getUserIdFromProps());\n  }\n  componentDidUpdate(prevProps: Props) {\n    if (this.props !== prevProps) {\n      this.updateState(this.getUserIdFromProps());\n    }\n  }\n\n  updateState(user_id: string) {\n    Api.fetchSubmissions(user_id).then(submissions => {\n      const first_ac_map = submissions\n        .filter(s => isAccepted(s.result))\n        .sort((a, b) => b.epoch_second - a.epoch_second)\n        .reduce(\n          (map, s) => map.set(s.problem_id, s.epoch_second),\n          new Map<string, number>()\n        );\n      const { longest_streak, current_streak, last_ac } = get_streak(\n        first_ac_map\n      );\n      const date_count_map = Array.from(first_ac_map).reduce(\n        (map, [problem_id, second]) => {\n          const date = formatDate(second);\n          const count = map.get(date);\n          if (count) {\n            return map.set(date, count + 1);\n          } else {\n            return map.set(date, 1);\n          }\n        },\n        new Map<string, number>()\n      );\n      const daily_data = Array.from(date_count_map)\n        .map(([date, count]) => ({ date: new Date(date).getTime(), count }))\n        .sort((a, b) => {\n          if (a.date < b.date) {\n            return -1;\n          } else {\n            return 1;\n          }\n        });\n      this.setState({\n        submissions,\n        longest_streak,\n        current_streak,\n        last_ac,\n        daily_data\n      });\n    });\n    Api.fetchUserInfo(user_id).then(user_info => this.setState({ user_info }));\n  }\n\n  getUserIdFromProps() {\n    return this.props.user_ids.length > 0 ? this.props.user_ids[0] : \"\";\n  }\n\n  render() {\n    const user_id = this.getUserIdFromProps();\n    if (user_id.length == 0) {\n      return <div />;\n    }\n\n    const {\n      submissions,\n      user_info,\n      longest_streak,\n      current_streak,\n      last_ac,\n      problems\n    } = this.state;\n\n    const shortest_rank = get_rank(user_id, this.state.short_ranking);\n    const fastest_rank = get_rank(user_id, this.state.fast_ranking);\n    const first_rank = get_rank(user_id, this.state.first_ranking);\n\n    const climing_data = this.state.daily_data.map(d => Object.assign({}, d));\n    climing_data.forEach((_, i) => {\n      if (i > 0) {\n        climing_data[i].count += climing_data[i - 1].count;\n      }\n    });\n\n    const ac_submissions = submissions.filter(\n      s => s.user_id === user_id && isAccepted(s.result)\n    );\n\n    const agc_solved = count_solved(/^agc\\d{3}_/, problems, ac_submissions);\n    const abc_solved = count_solved(/^abc\\d{3}_/, problems, ac_submissions);\n    const arc_solved = count_solved(/^arc\\d{3}_/, problems, ac_submissions);\n\n    const achievements = [\n      {\n        key: \"Accepted\",\n        value: user_info.accepted_count,\n        rank: user_info.accepted_count_rank\n      },\n      {\n        key: \"Shortest Code\",\n        value: shortest_rank.count,\n        rank: shortest_rank.rank\n      },\n      {\n        key: \"Fastest Code\",\n        value: fastest_rank.count,\n        rank: fastest_rank.rank\n      },\n      { key: \"First AC\", value: first_rank.count, rank: first_rank.rank }\n    ];\n\n    return (\n      <div>\n        <Row className=\"my-2 border-bottom\">\n          <h1>{user_id}</h1>\n        </Row>\n        <Row className=\"my-3\">\n          {achievements.map(({ key, value, rank }) => (\n            <Col key={key} className=\"text-center\">\n              <h6>{key}</h6>\n              <h3>{value}</h3>\n              <h6 className=\"text-muted\">{`${rank + 1}${ordinalSuffixOf(\n                rank + 1\n              )}`}</h6>\n            </Col>\n          ))}\n        </Row>\n        <Row className=\"my-3\">\n          <Col key=\"Rated Point Sum\" className=\"text-center\">\n            <h6>Rated Point Sum</h6>\n            <h3>{this.state.user_info.rated_point_sum} pt</h3>\n            <h6 className=\"text-muted\">{`${this.state.user_info\n              .rated_point_sum_rank + 1}${ordinalSuffixOf(\n              this.state.user_info.rated_point_sum + 1\n            )}`}</h6>\n          </Col>\n          <Col key=\"Longest Streak\" className=\"text-center\">\n            <h6>Longest Streak</h6>\n            <h3>{longest_streak} days</h3>\n          </Col>\n          <Col key=\"Current Streak\" className=\"text-center\">\n            <h6>Current Streak</h6>\n            <h3>{current_streak} days</h3>\n            <h6 className=\"text-muted\">{`Last AC: ${last_ac}`}</h6>\n          </Col>\n          <Col />\n        </Row>\n\n        <Row className=\"my-2 border-bottom\">\n          <h1>AtCoder Beginner Contest</h1>\n        </Row>\n        <Row className=\"my-3\">\n          {abc_solved.map(({ solved, total }, i) => {\n            const key = \"ABCDEF\".split(\"\")[i];\n            return (\n              <Col key={key} className=\"text-center\" xs=\"3\">\n                <SmallPieChart\n                  accepted={solved}\n                  trying={total - solved}\n                  title={`Problem ${key}`}\n                />\n              </Col>\n            );\n          })}\n        </Row>\n\n        <Row className=\"my-2 border-bottom\">\n          <h1>AtCoder Regular Contest</h1>\n        </Row>\n        <Row className=\"my-3\">\n          {arc_solved.map(({ solved, total }, i) => {\n            const key = \"ABCDEF\".split(\"\")[i];\n            return (\n              <Col key={key} className=\"text-center\" xs=\"3\">\n                <SmallPieChart\n                  accepted={solved}\n                  trying={total - solved}\n                  title={`Problem ${key}`}\n                />\n              </Col>\n            );\n          })}\n        </Row>\n\n        <Row className=\"my-2 border-bottom\">\n          <h1>AtCoder Grand Contest</h1>\n        </Row>\n        <Row className=\"my-3\">\n          {agc_solved.map(({ solved, total }, i) => {\n            const key = \"ABCDEF\".split(\"\")[i];\n            return (\n              <Col key={key} className=\"text-center\" xs=\"2\">\n                <SmallPieChart\n                  accepted={solved}\n                  trying={total - solved}\n                  title={`Problem ${key}`}\n                />\n              </Col>\n            );\n          })}\n        </Row>\n\n        <Row className=\"my-2 border-bottom\">\n          <h1>Daily Effort</h1>\n        </Row>\n        <DailyEffortBarChart daily_data={this.state.daily_data} />\n\n        <Row className=\"my-2 border-bottom\">\n          <h1>Climing</h1>\n        </Row>\n        <ClimingLineChart climing_data={climing_data} />\n\n        <Row className=\"my-2 border-bottom\">\n          <h1>Heatmap</h1>\n        </Row>\n        <FilteringHeatmap\n          submissions={submissions.filter(s => s.user_id === user_id)}\n        />\n\n        <Row className=\"my-2 border-bottom\">\n          <h1>Submissions</h1>\n        </Row>\n        <SubmissionList\n          problems={problems}\n          submissions={submissions.filter(s => s.user_id === user_id)}\n        />\n      </div>\n    );\n  }\n}\n\nconst get_streak = (first_ac_map: Map<string, number>) => {\n  let longest_streak = 1;\n  let current_streak = 1;\n  const seconds = Array.from(first_ac_map)\n    .map(([problem_id, epoch_second]) => epoch_second)\n    .sort();\n  for (let index = 1; index < seconds.length; index++) {\n    const second1 = seconds[index - 1];\n    const second2 = seconds[index];\n    if (formatDate(second2) === formatDate(second1)) {\n      continue;\n    }\n    if (formatDate(second2) === formatDate(second1 + 24 * 3600)) {\n      current_streak += 1;\n    } else {\n      longest_streak = Math.max(longest_streak, current_streak);\n      current_streak = 1;\n    }\n  }\n  longest_streak = Math.max(longest_streak, current_streak);\n  const today = new Date().getTime() / 1000;\n  const last_ac_second = seconds[seconds.length - 1];\n\n  if (\n    formatDate(today) !== formatDate(last_ac_second) &&\n    formatDate(today) !== formatDate(last_ac_second + 24 * 3600)\n  ) {\n    current_streak = 0;\n  }\n  return {\n    longest_streak,\n    current_streak,\n    last_ac: formatDate(last_ac_second)\n  };\n};\n\nconst get_rank = (user_id: string, ranking: RankingEntry[]) => {\n  const rank = ranking.filter(rank => rank.user_id == user_id)[0];\n  if (!rank) {\n    return { count: 0, rank: ranking.length };\n  }\n  const { problem_count } = rank;\n  const index = ranking\n    .map(({ problem_count }, i) => {\n      return { count: problem_count, i };\n    })\n    .filter(({ count }) => count == problem_count)\n    .reduce((min, { i }) => Math.min(i, min), ranking.length);\n  return { count: ranking[index].problem_count, rank: index };\n};\n\nconst count_solved = (\n  prefix: RegExp,\n  problems: MergedProblem[],\n  ac_submissions: Submission[]\n) => {\n  const regexps = [/_[a1]/, /_[b2]/, /_[c3]/, /_[d4]/, /_[e5]/, /_[f6]/];\n  const count = (ids: string[]) => {\n    const c = [0, 0, 0, 0, 0, 0];\n    ids\n      .filter(id => id.match(prefix))\n      .forEach(id => {\n        regexps.forEach((e, i) => {\n          if (id.match(e)) {\n            c[i] += 1;\n          }\n        });\n      });\n    return c;\n  };\n\n  const total_count = count(problems.map(p => p.id));\n  const solved_count = count(\n    Array.from(\n      ac_submissions.reduce(\n        (set, s) => set.add(s.problem_id),\n        new Set<string>()\n      )\n    )\n  );\n\n  return total_count\n    .map((total, i) => ({\n      total: total,\n      solved: solved_count[i]\n    }))\n    .filter(({ total }) => total > 0);\n};\n\nexport default UserPage;\n","import React from 'react';\nimport { NavLink as RouterLink } from 'react-router-dom';\nimport { withRouter, RouteComponentProps } from 'react-router';\nimport {\n\tNavLink,\n\tNavbar,\n\tNavbarBrand,\n\tNavbarToggler,\n\tCollapse,\n\tNav,\n\tNavItem,\n\tUncontrolledDropdown,\n\tDropdownToggle,\n\tDropdownMenu,\n\tDropdownItem,\n\tForm,\n\tInput,\n\tButton,\n\tFormGroup,\n\tLabel\n} from 'reactstrap';\n\nenum PageKind {\n\tTABLE = 'table',\n\tLIST = 'list',\n\tUSER = 'user'\n}\n\ninterface State {\n\tuser_id: string;\n\trival_id: string;\n\tkind: PageKind;\n}\n\ninterface Props extends RouteComponentProps {}\n\nclass PrimitiveNavigationBar extends React.Component<Props, State> {\n\tconstructor(props: any) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tuser_id: '',\n\t\t\trival_id: '',\n\t\t\tkind: PageKind.TABLE\n\t\t};\n\t}\n\n\tsubmit(nextKind: PageKind) {\n\t\tthis.setState({ kind: nextKind });\n\t\tconst { user_id, rival_id } = this.state;\n\n\t\tconst users: string[] = [];\n\t\tif (user_id.match(/^[a-zA-Z0-9]*$/)) {\n\t\t\tusers.push(user_id);\n\t\t}\n\t\tif (rival_id.match(/^[a-zA-Z0-9,]+$/)) {\n\t\t\trival_id.split(',').filter((user) => user.length > 0).forEach((user) => users.push(user));\n\t\t}\n\n\t\tconst current_pathname = this.props.history.location.pathname;\n\n\t\tconst next_pathname = '/' + nextKind + '/' + users.join('/');\n\t\tif (current_pathname !== next_pathname) {\n\t\t\tthis.props.history.push(next_pathname);\n\t\t}\n\t}\n\n\tcomponentWillMount() {\n\t\tlet kind = PageKind.TABLE;\n\t\tconst { pathname } = this.props.history.location;\n\t\tif (pathname.match(/^\\/user/)) {\n\t\t\tkind = PageKind.USER;\n\t\t} else if (pathname.match(/^\\/list/)) {\n\t\t\tkind = PageKind.LIST;\n\t\t}\n\n\t\tconst params = pathname.split('/');\n\t\tconst user_id = params.length >= 3 ? params[2] : '';\n\t\tconst rival_id = params.slice(3).filter((x) => x.length > 0).join(',');\n\t\tthis.setState({ kind, user_id, rival_id });\n\t}\n\n\trender() {\n\t\tlet root_url = '/';\n\t\tif (this.state.user_id.length > 0 || this.state.rival_id.length > 0) {\n\t\t\troot_url += 'table/';\n\t\t}\n\t\tif (this.state.user_id.length > 0) {\n\t\t\troot_url += this.state.user_id + '/';\n\t\t}\n\t\tif (this.state.rival_id.length > 0) {\n\t\t\troot_url += this.state.rival_id.split(',').filter((s) => s.match(/^[0-9a-zA-Z_]+/)).join('/');\n\t\t}\n\t\treturn (\n\t\t\t<Navbar color=\"light\" light expand=\"md\">\n\t\t\t\t<NavbarBrand tag={RouterLink} to={root_url}>\n\t\t\t\t\tAtCoder Problems\n\t\t\t\t</NavbarBrand>\n\t\t\t\t<NavbarToggler />\n\t\t\t\t<Collapse navbar>\n\t\t\t\t\t<Nav className=\"ml-auto\" navbar>\n\t\t\t\t\t\t<Form inline>\n\t\t\t\t\t\t\t<FormGroup className=\"mb-2 mr-sm-2 mb-sm-0\">\n\t\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\t\tstyle={{ width: '150px' }}\n\t\t\t\t\t\t\t\t\tonKeyPress={(e) => {\n\t\t\t\t\t\t\t\t\t\tif (e.key == 'Enter') {\n\t\t\t\t\t\t\t\t\t\t\tthis.submit(this.state.kind);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\tvalue={this.state.user_id}\n\t\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\t\tname=\"user_id\"\n\t\t\t\t\t\t\t\t\tid=\"user_id\"\n\t\t\t\t\t\t\t\t\tplaceholder=\"User ID\"\n\t\t\t\t\t\t\t\t\tonChange={(e) => this.setState({ user_id: e.target.value })}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</FormGroup>\n\t\t\t\t\t\t\t<FormGroup className=\"mb-2 mr-sm-2 mb-sm-0\">\n\t\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\t\tstyle={{ width: '150px' }}\n\t\t\t\t\t\t\t\t\tonKeyPress={(e) => {\n\t\t\t\t\t\t\t\t\t\tif (e.key == 'Enter') {\n\t\t\t\t\t\t\t\t\t\t\tthis.submit(this.state.kind);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\tvalue={this.state.rival_id}\n\t\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\t\tname=\"rival_id\"\n\t\t\t\t\t\t\t\t\tid=\"rival_id\"\n\t\t\t\t\t\t\t\t\tplaceholder=\"Rival ID, ...\"\n\t\t\t\t\t\t\t\t\tonChange={(e) => this.setState({ rival_id: e.target.value })}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</FormGroup>\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tclassName=\"mb-2 mr-sm-2 mb-sm-0\"\n\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\tthis.submit(PageKind.TABLE);\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tTable\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tclassName=\"mb-2 mr-sm-2 mb-sm-0\"\n\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\tthis.submit(PageKind.LIST);\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tList\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tclassName=\"mb-2 mr-sm-2 mb-sm-0\"\n\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\tthis.submit(PageKind.USER);\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tUser Page\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</Form>\n\n\t\t\t\t\t\t<UncontrolledDropdown nav inNavbar>\n\t\t\t\t\t\t\t<DropdownToggle nav caret>\n\t\t\t\t\t\t\t\tRankings\n\t\t\t\t\t\t\t</DropdownToggle>\n\t\t\t\t\t\t\t<DropdownMenu right>\n\t\t\t\t\t\t\t\t<DropdownItem tag={RouterLink} to=\"/ac\">\n\t\t\t\t\t\t\t\t\tAC Count\n\t\t\t\t\t\t\t\t</DropdownItem>\n\t\t\t\t\t\t\t\t<DropdownItem tag={RouterLink} to=\"/fast\">\n\t\t\t\t\t\t\t\t\tFastest Submissions\n\t\t\t\t\t\t\t\t</DropdownItem>\n\t\t\t\t\t\t\t\t<DropdownItem tag={RouterLink} to=\"/short\">\n\t\t\t\t\t\t\t\t\tShortest Submissions\n\t\t\t\t\t\t\t\t</DropdownItem>\n\t\t\t\t\t\t\t\t<DropdownItem tag={RouterLink} to=\"/first\">\n\t\t\t\t\t\t\t\t\tFirst AC\n\t\t\t\t\t\t\t\t</DropdownItem>\n\t\t\t\t\t\t\t\t<DropdownItem tag={RouterLink} to=\"/sum\">\n\t\t\t\t\t\t\t\t\tRated Point Ranking\n\t\t\t\t\t\t\t\t</DropdownItem>\n\t\t\t\t\t\t\t\t<DropdownItem tag={RouterLink} to=\"/lang\">\n\t\t\t\t\t\t\t\t\tLanguage Owners\n\t\t\t\t\t\t\t\t</DropdownItem>\n\t\t\t\t\t\t\t</DropdownMenu>\n\t\t\t\t\t\t</UncontrolledDropdown>\n\n\t\t\t\t\t\t<UncontrolledDropdown nav inNavbar>\n\t\t\t\t\t\t\t<DropdownToggle nav caret>\n\t\t\t\t\t\t\t\tLinks\n\t\t\t\t\t\t\t</DropdownToggle>\n\t\t\t\t\t\t\t<DropdownMenu right>\n\t\t\t\t\t\t\t\t<DropdownItem tag=\"a\" href=\"https://atcoder.jp/\" target=\"_blank\">\n\t\t\t\t\t\t\t\t\tAtCoder\n\t\t\t\t\t\t\t\t</DropdownItem>\n\t\t\t\t\t\t\t\t<DropdownItem tag=\"a\" href=\"http://aoj-icpc.ichyo.jp/\" target=\"_blank\">\n\t\t\t\t\t\t\t\t\tAOJ-ICPC\n\t\t\t\t\t\t\t\t</DropdownItem>\n\t\t\t\t\t\t\t\t<DropdownItem\n\t\t\t\t\t\t\t\t\ttag=\"a\"\n\t\t\t\t\t\t\t\t\thref=\"https://github.com/kenkoooo/AtCoderProblems\"\n\t\t\t\t\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\tGitHub\n\t\t\t\t\t\t\t\t</DropdownItem>\n\t\t\t\t\t\t\t\t<DropdownItem tag=\"a\" href=\"https://twitter.com/kenkoooo\" target=\"_blank\">\n\t\t\t\t\t\t\t\t\t@kenkoooo\n\t\t\t\t\t\t\t\t</DropdownItem>\n\t\t\t\t\t\t\t</DropdownMenu>\n\t\t\t\t\t\t</UncontrolledDropdown>\n\t\t\t\t\t</Nav>\n\t\t\t\t</Collapse>\n\t\t\t</Navbar>\n\t\t);\n\t}\n}\n\nconst NavigationBar = withRouter(PrimitiveNavigationBar);\n\nexport default NavigationBar;\n","import React, { Component } from 'react';\nimport { HashRouter as Router, Route, Switch, Redirect, RouteComponentProps } from 'react-router-dom';\nimport { Container } from 'reactstrap';\n\nimport ACRanking from './pages/ACRanking';\nimport FastestRanking from './pages/FastestRanking';\nimport FirstRanking from './pages/FirstRanking';\nimport ShortRanking from './pages/ShortRanking';\nimport SumRanking from './pages/SumRanking';\nimport LanguageOwners from './pages/LanguageOwners';\nimport ListPage from './pages/ListPage';\nimport UserPage from './pages/UserPage';\nimport TablePage from './pages/TablePage';\n\nimport NavigationBar from './components/NavigationBar';\ntype MatchUserId = { match: { params: { user_id?: string } } };\nconst extractUserId = ({ match: { params: { user_id } } }: MatchUserId) => (user_id ? user_id.split('/') : []);\n\nclass App extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<Router>\n\t\t\t\t<div>\n\t\t\t\t\t<NavigationBar />\n\t\t\t\t\t<Container style={{ width: '100%', maxWidth: '90%' }}>\n\t\t\t\t\t\t<Switch>\n\t\t\t\t\t\t\t<Route exact path=\"/ac\" component={ACRanking} />\n\t\t\t\t\t\t\t<Route exact path=\"/fast\" component={FastestRanking} />\n\t\t\t\t\t\t\t<Route exact path=\"/short\" component={ShortRanking} />\n\t\t\t\t\t\t\t<Route exact path=\"/first\" component={FirstRanking} />\n\t\t\t\t\t\t\t<Route exact path=\"/sum\" component={SumRanking} />\n\t\t\t\t\t\t\t<Route exact path=\"/lang\" component={LanguageOwners} />\n\t\t\t\t\t\t\t<Route\n\t\t\t\t\t\t\t\tpath=\"/user/:user_id([a-zA-Z0-9]*)*\"\n\t\t\t\t\t\t\t\tcomponent={(props: MatchUserId) => <UserPage user_ids={extractUserId(props)} />}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<Route\n\t\t\t\t\t\t\t\tpath=\"/table/:user_id([a-zA-Z0-9]*)*\"\n\t\t\t\t\t\t\t\tcomponent={(props: MatchUserId) => <TablePage user_ids={extractUserId(props)} />}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<Route\n\t\t\t\t\t\t\t\tpath=\"/list/:user_id([a-zA-Z0-9]*)*\"\n\t\t\t\t\t\t\t\tcomponent={(props: MatchUserId) => <ListPage user_ids={extractUserId(props)} />}\n\t\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t\t<Redirect path=\"/\" to=\"/table\" />\n\t\t\t\t\t\t</Switch>\n\t\t\t\t\t</Container>\n\t\t\t\t</div>\n\t\t\t</Router>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'react-bootstrap-table/dist/react-bootstrap-table-all.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}